ranges <- c(0, 1.0, 2.0, 3.0, 4.0, 5.1)
df$ranges <- cut(df$Rating, breaks = ranges, labels = c("0-1.0", "1.1-2.0", "2.1-3.0", "3.1-4.0", "4.1-5.0"), right = FALSE)
df %>%
select(ranges, Rating) %>%
head()
df[which(is.na(df$Review)), "Review"] <- 0
view(df)
rating_visual <- ggplot(df_rating, aes(x = ranges, y = n, fill = ranges)) +
geom_col() +
labs(x = "Rating ranges", y = "Courses", fill = "Rating ranges") +
ggtitle("Course vs. Rating")
df_rating <- as.data.frame(count(df, ranges))
view(df_rating)
?count
rating_visual <- ggplot(df_rating, aes(x = ranges, y = n, fill = ranges)) +
geom_col() +
labs(x = "Rating ranges", y = "Courses", fill = "Rating ranges") +
ggtitle("Course vs. Rating")
rating_visual
ggplot(df, aes(x = Level, fill = Level)) +
geom_bar() +
labs(y = "Course count") +
ggtitle("Courses vs. Level")
ggsave("level_visual.png", level_visual)
unique(df$Modules)
length(unique(df$Instructor))
length(unique(df$Modules))
length(unique(df$offered))
# Visualization: Count of offered ------------------
ggplot(df, aes(x=offered, fill = offered)) +
geom_col()
# Visualization: Count of offered ------------------
ggplot(count(df, offered), aes(x=offered, fill = offered)) +
geom_col()
# Visualization: Count of offered ------------------
ggplot(count(df, offered), aes(x=offered, y=n, fill = offered)) +
geom_col()
# Visualization: Count of offered ------------------
ggplot(ad.data.frame(count(df, offered)), aes(x=offered, y=n, fill = offered)) +
geom_col()
# Visualization: Count of offered ------------------
ggplot(as.data.frame(count(df, offered)), aes(x=offered, y=n, fill = offered)) +
geom_col()
count(df, offered)
sample <- as.data.frame(count(df, offered))
view(sample)
unique(df$duar)
unique(df$Duration)
# Visualization: Count of offered ----------------------------------------------
sample <- as.data.frame(count(df, offered))
view(sample)
ggplot(sample, aes(x=offered, y=n, fill = offered)) +
geom_col()
sample
view(sample)
# Visualization: Count of offered ----------------------------------------------
sample <- df %>% count(offered) %>% arrange(desc(n)) %>% head(10)
ggplot(sample, aes(x=offered, y=n, fill = offered)) +
geom_col()
# Visualization: Count of offered ----------------------------------------------
sample <- df %>% count(offered) %>% arrange(desc(n)) %>% head(5)
ggplot(sample, aes(x=offered, y=n, fill = offered)) +
geom_col()
ggplot(sample, aes(x=offered, y=n, fill = offered)) +
geom_col() +
ggtitle('Top 5 Sources Offering') +
labs(y='Source Offer', x='Count', fill='Source Offer') +
ggplot(sample, aes(x=offered, y=n, fill = offered)) +
geom_col() +
ggtitle('Top 5 Sources Offering') +
labs(y='Source Offer', x='Count', fill='Source Offer')
ggplot(sample, aes(x = offered, y = n, fill = offered)) +
geom_col() +
ggtitle('Top 5 Sources Offering') +
labs(y = 'Source Offer', x = 'Count', fill = 'Source Offer')
ggplot(sample, aes(x = offered, y = n, fill = offered)) +
geom_col() +
ggtitle('Top 5 Sources Offering') +
labs(x = 'Source Offer', y = 'Count', fill = 'Source Offer')
# Duration Calculation ---------------------------------------------------------
df2 <- df
unique(df$Duration)
colnames(df)
for (i in colnames(df2)){
df2$i <- trimws(df2$i)
}
df2[[col_name]] <- trimws(df2[[col_name]])
for (col_name in colnames(df2)){
df2[[col_name]] <- trimws(df2[[col_name]])
}
unique(df2$Duration)
df2 <- clean_sign_func(df2, 'Duration', ',')
unique(df2$Duration)
df2 <- clean_sign_func(df2, 'Duration', 'and')
unique(df2$Duration)
# Duration Calculation ---------------------------------------------------------
df2 <- df
for (col_name in colnames(df2)){
df2[[col_name]] <- trimws(df2[[col_name]])
}
df2 <- clean_sign_func(df2, 'Duration', ',')
df2 <- clean_sign_func(df2, 'Duration', ' and ')
unique(df2$Duration)
# Duration Calculation ---------------------------------------------------------
df2 <- df
for (col_name in colnames(df2)){
df2[[col_name]] <- trimws(df2[[col_name]])
}
df2 <- clean_sign_func(df2, 'Duration', ',')
df2 <- clean_sign_func(df2, 'Duration', 'and ')
unique(df2$Duration)
# total_duration <- function(df)
exp <- '20 hours and 14 minutes'
test <- grepl('\\d+ hours and \\d+ minutes')
test <- grepl('\\d+ hours and \\d+ minutes', exp)
# total_duration <- function(df)
exp <- '20 hours 14 minutes'
test <- grepl('\\d+ hours \\d+ minutes', exp)
hours <- ifelse(is.na(hours),0,hours)
return(total_hours)
total_duration <- function(value){
if(value != 'No information'){
hours <- as.numeric((
str_extract(value, "(?<=\\b)\\d+(?=\\s+hours?\\b)")
))
minutes <- as.numeric((
str_extract(value, "(><=\\b)\\d+(?=\\s+minutes?\\b)")
))
months <- as.numeric((
str_extract(value, "(?<=\\b)\\d+(?=\\s+months?\\b)")
))
hours <- ifelse(is.na(hours),0,hours)
minutes <- ifelse(is.na(minutes),0,minutes)
months <- ifelse(is.na(months),0,months)
total_hours <- hours + minutes/60 + months*720
} else {next}
return(total_hours)
}
test <- total_duration(exp)
hours <- as.numeric((
str_extract('20 hours 14 minutes', "(?<=\\b)\\d+(?=\\s+hours?\\b)")
))
minutes <- as.numeric((
str_extract('20 hours 14 minutes', "(><=\\b)\\d+(?=\\s+minutes?\\b)")
))
minutes <- as.numeric((
str_extract('20 hours 14 minutes', "(?<=\\b)\\d+(?=\\s+minutes?\\b)")
))
minutes <- as.numeric((
str_extract(value, "(?<=\\b)\\d+(?=\\s+minutes?\\b)")
))
total_duration <- function(value){
if(value != 'No information'){
hours <- as.numeric((
str_extract(value, "(?<=\\b)\\d+(?=\\s+hours?\\b)")
))
minutes <- as.numeric((
str_extract(value, "(?<=\\b)\\d+(?=\\s+minutes?\\b)")
))
months <- as.numeric((
str_extract(value, "(?<=\\b)\\d+(?=\\s+months?\\b)")
))
hours <- ifelse(is.na(hours),0,hours)
minutes <- ifelse(is.na(minutes),0,minutes)
months <- ifelse(is.na(months),0,months)
total_hours <- hours + minutes/60 + months*720
} else {next}
return(total_hours)
}
exp <- '20 hours 14 minutes'
test <- total_duration(exp)
exp <- '20 hours 14 minutes 4 months'
test <- total_duration(exp)
total_duration <- function(value){
if(value != 'No information'){
hours <- as.numeric((
str_extract(value, "(?<=\\b)\\d+(?=\\s+hours?\\b)")
))
minutes <- as.numeric((
str_extract(value, "(?<=\\b)\\d+(?=\\s+minutes?\\b)")
))
months <- as.numeric((
str_extract(value, "(?<=\\b)\\d+(?=\\s+months?\\b)")
))
hours <- ifelse(is.na(hours),0,hours)
minutes <- ifelse(is.na(minutes),0,minutes)
months <- ifelse(is.na(months),0,months)
total_hours <- hours + minutes/60 + months*720
} else {next}
return(round(total_hours,2))
}
exp <- '20 hours 14 minutes 4 months'
test <- total_duration(exp)
df2 %>% mutate(
hours_spent = sapply(Duration,total_duration)
)
if(value != 'No information'){
hours <- as.numeric((
str_extract(value, "(?<=\\b)\\d+(?=\\s+hours?\\b)")
))
minutes <- as.numeric((
str_extract(value, "(?<=\\b)\\d+(?=\\s+minutes?\\b)")
))
months <- as.numeric((
str_extract(value, "(?<=\\b)\\d+(?=\\s+months?\\b)")
))
hours <- ifelse(is.na(hours),0,hours)
minutes <- ifelse(is.na(minutes),0,minutes)
months <- ifelse(is.na(months),0,months)
total_hours <- hours + minutes/60 + months*720
} else {return(NA)}
total_duration <- function(value){
if(value != 'No information'){
hours <- as.numeric((
str_extract(value, "(?<=\\b)\\d+(?=\\s+hours?\\b)")
))
minutes <- as.numeric((
str_extract(value, "(?<=\\b)\\d+(?=\\s+minutes?\\b)")
))
months <- as.numeric((
str_extract(value, "(?<=\\b)\\d+(?=\\s+months?\\b)")
))
hours <- ifelse(is.na(hours),0,hours)
minutes <- ifelse(is.na(minutes),0,minutes)
months <- ifelse(is.na(months),0,months)
total_hours <- hours + minutes/60 + months*720
} else {return(NA)}
return(round(total_hours,2))
}
df2 %>% mutate(
hours_spent = sapply(Duration,total_duration)
)
view(df%>%select(Duration, hours_spent))
df2 <- df2 %>% mutate(
hours_spent = sapply(Duration,total_duration)
)
view(df2)
view(df2 %>% select(Duration, hours_spent))
total_duration <- function(value){
if(value != 'No information'){
hours <- as.numeric((
str_extract(value, "(?<=\\b)\\d+(\\.\\d+)?(?=\\s+hours?\\b)")
))
minutes <- as.numeric((
str_extract(value, "(?<=\\b)\\d+(\\.\\d+)?(?=\\s+minutes?\\b)")
))
months <- as.numeric((
str_extract(value, "(?<=\\b)\\d+(\\.\\d+)?(?=\\s+months?\\b)")
))
hours <- ifelse(is.na(hours),0,hours)
minutes <- ifelse(is.na(minutes),0,minutes)
months <- ifelse(is.na(months),0,months)
total_hours <- hours + minutes/60 + months*720
} else {return(NA)}
return(round(total_hours,2))
}
df2 <- df2 %>% mutate(
hours_spent = sapply(Duration,total_duration)
)
view(df2 %>% select(Duration, hours_spent))
total_duration <- function(value){
if(value != 'No information'){
hours <- as.numeric((
str_extract(value, "(?<=\\b)\\d+(\\.\\d+)?(?=\\s+hours?\\b)")
))
minutes <- as.numeric((
str_extract(value, "(?<=\\b)\\d+(\\.\\d+)?(?=\\s+minutes?\\b)")
))
months <- as.numeric((
str_extract(value, "(?<=\\b)\\d+(\\.\\d+)?(?=\\s+months?\\b)")
))
hours <- ifelse(is.na(hours),0,hours)
minutes <- ifelse(is.na(minutes),0,minutes)
months <- ifelse(is.na(months),0,months)
total_hours <- hours + minutes/60 + months*720
} else {return(0)}
return(round(total_hours,2))
}
df2 <- df2 %>% mutate(
hours_spent = sapply(Duration,total_duration)
)
average_time_df <- df2 %>% groupby(Level)
average_time_df <- df2 %>% groupby(Level) %>%
mean(hours_spent)
average_time_df <- df2 %>% group_by(Level) %>%
mean(hours_spent)
summary(df2)
average_time_df <- df2 %>% group_by(Level) %>%
summarize(mean(hours_spent))
average_time_df
average_time_df <- df2 %>% group_by(Level) %>%
summarize(average_time = mean(hours_spent))
average_time_df
ggplot(average_time_df, aes(x=Level, y=average_time, fill=Level)) +
geom_col()
ggplot(average_time_df, aes(x=Level, y=average_time, fill=Level)) +
geom_col() +
labs(title='Average Time Spent for a Course by Level', y='Average Time')
average_time_level <- ggplot(average_time_df, aes(x=Level, y=average_time, fill=Level)) +
geom_col() +
labs(title='Average Time Spent for a Course by Level', y='Average Time')
ggpot(df2, aes(x=Level, y=hours_spent)) +
geom_boxplot()
ggplot(df2, aes(x=Level, y=hours_spent)) +
geom_boxplot()
ggplot(df2, aes(x=Level, y=hours_spent)) +
geom_violin()
level_hoursSpent_matrix = dcast(df2, Level ~ ranges, value.var = 'hours_spent')
install.packages(rshape2)
install.packages("reshape2")
library(reshape2)
level_hoursSpent_matrix = dcast(df2, Level ~ ranges, value.var = 'hours_spent')
level_hoursSpent_matrix = dcast(df2, ranges~Level, value.var = 'hours_spent')
level_visual
ggplot(df, aes(x = Level, fill = Level)) +
geom_col() +
labs(y = "Course count") +
ggtitle("Courses vs. Level")
# Visualization: number of course vs. level-------------------------------------
sample <- df %>%
level_visual <- ggplot(df, aes(x = Level, fill = Level)) +
geom_bar(stat='identity') +
labs(y = "Course count") +
ggtitle("Courses vs. Level")
# Visualization: number of course vs. level-------------------------------------
sample <- df %>%
level_visual <- ggplot(df, aes(x = Level, fill = Level)) +
geom_bar(stat='identity') +
labs(y = "Course count") +
ggtitle("Courses vs. Level")
level_visual <- ggplot(df, aes(x = Level, fill = Level)) +
geom_bar(stat='identity') +
labs(y = "Course count") +
ggtitle("Courses vs. Level")
level_visual
level_visual <- ggplot(df, aes(x = Level, fill = Level)) +
geom_bar() +
labs(y = "Course count") +
ggtitle("Courses vs. Level")
level_visual
# Visualization: number of course vs. level-------------------------------------
df_count <- df %>% mutate(
count = count(Level)
)
# Visualization: number of course vs. level-------------------------------------
df_count <- df %>% mutate(
count = count(Level)
)
# Visualization: number of course vs. level-------------------------------------
df_count <- df %>% count = count(Level)
# Visualization: number of course vs. level-------------------------------------
df_count <- df %>% count = count(Level)
view(df)
# Visualization: number of course vs. level-------------------------------------
df_count <- df %>% count(Level)
df_count
df_count <- df_count %>% mutate(
Level = reorder(Level, n)
)
df_count
# Visualization: number of course vs. level-------------------------------------
df_count <- df %>% count(Level)
df_count <- df_count %>% mutate(
Level = reorder(Level, n)
)
df_count
df_count <- df_count %>% mutate(
Level = reorder(Level, -n)
)
df_count
level_visual <- ggplot(df, aes(x = Level, y=n, fill = Level)) +
geom_bar(stat='identity') +
labs(y = "Course count") +
ggtitle("Courses vs. Level")
level_visual
colnames(df_count)
# Visualization: number of course vs. level-------------------------------------
df_count <- df %>% count(Level)
level_visual <- ggplot(df, aes(x = Level, y=n, fill = Level)) +
geom_bar(stat='identity') +
labs(y = "Course count") +
ggtitle("Courses vs. Level")
level_visual
df_count <- df_count %>% mutate(Level = factor(Level, levels = Level[order(-n)]))
df_count
level_visual <- ggplot(df, aes(x = Level, y=n, fill = Level)) +
geom_bar(stat='identity') +
labs(y = "Course count") +
ggtitle("Courses vs. Level")
level_hoursSpent_matrix
level_visual
level_visual <- ggplot(df_count, aes(x = Level, y=n, fill = Level)) +
geom_bar(stat='identity') +
labs(y = "Course count") +
ggtitle("Courses vs. Level")
level_visual
# Visualization: number of course vs. level-------------------------------------
df_count <- df %>% count(Level)
df_count <- df_count %>% mutate(
Level = reorder(Level, -n)
)
level_visual <- ggplot(df_count, aes(x = Level, y=n, fill = Level)) +
geom_bar(stat='identity') +
labs(y = "Course count") +
ggtitle("Courses vs. Level")
level_vis
level_visual
# Visualization: Count of offered ----------------------------------------------
sample <- df %>% count(offered) %>% arrange(desc(n)) %>% head(5)
sample
df_rating
rating_visual <- ggplot(df_rating, aes(x = ranges, y = n, fill = ranges)) +
geom_col() +
labs(x = "Rating ranges", y = "Courses", fill = "Rating ranges") +
ggtitle("Course vs. Rating")
rating_visual
View(level_hoursSpent_matrix)
average_time_level
ggplot(level_hoursSpent_matrix, aes(x=ranges, y=Level, fill=hours_spent)) + geom_tile()
> ggplot(level_hoursSpent_matrix, aes(x=ranges, y=Level, fill=hours_spent)) + geom_tile() + scale_fill_gradient(low='white', high='blue')
ggplot(level_hoursSpent_matrix, aes(x=ranges, y=Level, fill=hours_spent)) + geom_tile() + scale_fill_gradient(low='white', high='blue')
df2 %>% count(Level, ranges)
df_count <- df2 %>% count(Level, ranges)
level_hoursSpent_matrix = dcast(df2, Level ~ ranges, value.var = n)
level_hoursSpent_matrix = dcast(df_count, Level ~ ranges, value.var = n)
level_hoursSpent_matrix = dcast(df_count, Level ~ ranges, value.var = 'n')
View(level_hoursSpent_matrix)
level_ranges_matrix = dcast(df_count, Level ~ ranges, value.var = 'n')
View(level_ranges_matrix)
View(level_hoursSpent_matrix)
View(level_hoursSpent_matrix)
level_ranges_wideFormat <- dcast(df_count, Level ~ ranges, value.var = 'n')
level_ranges_matrix <- as.matrix(level_ranges_wideFormat)
level_ranges_matrix <- as.matrix(level_ranges_wideFormat[,-1])
View(level_ranges_matrix)
View(level_ranges_wideFormat)
rownames(level_ranges_matrix) <- level_ranges_wideFormat$Level
View(level_ranges_matrix)
melt(level_ranges_matrix, varnames=c("Level","Ranges"), value.name = 'Count')
df2 %>% count(Level, ranges)
sample <- df %>% count(Level, ranges)
ggplot(sample, aes(x=Level, y=ranges, fill=n)) +
geom_tile() +
scale_fill_gradient(low='pink', high='blue')
ggplot(sample, aes(x=Level, y=ranges, fill=n)) +
geom_tile() +
scale_fill_gradient(low='pink', high='blue', na.value = 'white')
ggplot(sample, aes(x=Level, y=ranges, fill=n)) +
geom_tile() +
scale_fill_gradient(low='pink', high='blue', na.value = 'white')
ggplot(sample, aes(x=Level, y=ranges, fill=n)) +
geom_tile() +
scale_fill_gradient(low='pink', high='blue', na.value = 'red')
ggplot(sample, aes(x=Level, y=ranges, fill=n)) +
geom_tile() +
scale_fill_gradient(low='pink', high='blue', na.value = 'red')
sample <- df %>% count(Level, ranges)
ggplot(sample, aes(x=Level, y=ranges, fill=n)) +
geom_tile() +
scale_fill_gradient(low='pink', high='blue', na.value = 'red')
level_ranges_matrix <- melt(level_ranges_matrix, varnames=c("Level","Ranges"), value.name = 'Count')
ggplot(level_ranges_matrix, aes(x=Level, y=Ranges, fill=Count)) +
geom_tile() +
scale_fill_gradient(low='pink', high='blue')
ggplot(level_ranges_matrix, aes(x=Level, y=Ranges, fill=Count)) +
geom_tile() +
scale_fill_gradient(low='pink', high='blue', na.value='red')
ggplot(level_ranges_matrix, aes(x=Level, y=Ranges, fill=Count)) +
geom_tile() +
scale_fill_gradient(low='white', high='blue', na.value='red')
ggplot(level_ranges_matrix, aes(x=Level, y=Ranges, fill=Count)) +
geom_tile() +
scale_fill_viridis(name = "Count", option = "D")
ggplot(level_ranges_matrix, aes(x=Level, y=Ranges, fill=Count)) +
geom_tile() +
scale_fill_gradient(low='lightblue', high='darkblue', na.value='red')
ggplot(level_ranges_matrix, aes(x=Level, y=Ranges, fill=Count)) +
geom_tile() +
scale_fill_gradient(low='lightblue', high='darkblue', na.value='white')
df_count <- df2 %>% count(Level, ranges)
level_ranges_wideFormat <- dcast(df_count, Level ~ ranges, value.var = 'n')
level_ranges_matrix <- as.matrix(level_ranges_wideFormat[,-1])
rownames(level_ranges_matrix) <- level_ranges_wideFormat$Level
level_ranges_matrix <- melt(level_ranges_matrix, varnames=c("Level","Rating Ranges"), value.name = 'Count')
ggplot(level_ranges_matrix, aes(x=Level, y='Rating Ranges', fill=Count)) +
geom_tile() +
scale_fill_gradient(low='lightblue', high='darkblue', na.value='white')
ggplot(level_ranges_matrix, aes(x=Level, y=Rating Ranges, fill=Count)) +
df_count <- df2 %>% count(Level, ranges)
level_ranges_wideFormat <- dcast(df_count, Level ~ ranges, value.var = 'n')
level_ranges_matrix <- as.matrix(level_ranges_wideFormat[,-1])
rownames(level_ranges_matrix) <- level_ranges_wideFormat$Level
level_ranges_matrix <- melt(level_ranges_matrix, varnames=c("Level","Ranges"), value.name = 'Count')
ggplot(level_ranges_matrix, aes(x=Level, y=Ranges, fill=Count)) +
geom_tile() +
scale_fill_gradient(low='lightblue', high='darkblue', na.value='white') +
labs(y='Rating Ranges', title='Distribution of Courses by Level and Rating Ranges')
ggplot(level_ranges_matrix, aes(x=Level, y=Ranges, fill=Count)) +
geom_tile() +
geom_test(aes(label=Count), color='black') +
scale_fill_gradient(low='lightblue', high='darkblue', na.value='white') +
labs(y='Rating Ranges', title='Distribution of Courses by Level and Rating Ranges')
ggplot(level_ranges_matrix, aes(x=Level, y=Ranges, fill=Count)) +
geom_tile() +
geom_text(aes(label=Count), color='black') +
scale_fill_gradient(low='lightblue', high='darkblue', na.value='white') +
labs(y='Rating Ranges', title='Distribution of Courses by Level and Rating Ranges')
ggplot(level_ranges_matrix, aes(x=Level, y=Ranges, fill=Count)) +
geom_tile() +
geom_text(aes(label=Count), color='black') +
scale_fill_gradient(low='lightblue', high='blue', na.value='white') +
labs(y='Rating Ranges', title='Distribution of Courses by Level and Rating Ranges')
