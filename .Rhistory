scale_fill_gradient(low='pink', high='blue', na.value = 'red')
level_ranges_matrix <- melt(level_ranges_matrix, varnames=c("Level","Ranges"), value.name = 'Count')
ggplot(level_ranges_matrix, aes(x=Level, y=Ranges, fill=Count)) +
geom_tile() +
scale_fill_gradient(low='pink', high='blue')
ggplot(level_ranges_matrix, aes(x=Level, y=Ranges, fill=Count)) +
geom_tile() +
scale_fill_gradient(low='pink', high='blue', na.value='red')
ggplot(level_ranges_matrix, aes(x=Level, y=Ranges, fill=Count)) +
geom_tile() +
scale_fill_gradient(low='white', high='blue', na.value='red')
ggplot(level_ranges_matrix, aes(x=Level, y=Ranges, fill=Count)) +
geom_tile() +
scale_fill_viridis(name = "Count", option = "D")
ggplot(level_ranges_matrix, aes(x=Level, y=Ranges, fill=Count)) +
geom_tile() +
scale_fill_gradient(low='lightblue', high='darkblue', na.value='red')
ggplot(level_ranges_matrix, aes(x=Level, y=Ranges, fill=Count)) +
geom_tile() +
scale_fill_gradient(low='lightblue', high='darkblue', na.value='white')
df_count <- df2 %>% count(Level, ranges)
level_ranges_wideFormat <- dcast(df_count, Level ~ ranges, value.var = 'n')
level_ranges_matrix <- as.matrix(level_ranges_wideFormat[,-1])
rownames(level_ranges_matrix) <- level_ranges_wideFormat$Level
level_ranges_matrix <- melt(level_ranges_matrix, varnames=c("Level","Rating Ranges"), value.name = 'Count')
ggplot(level_ranges_matrix, aes(x=Level, y='Rating Ranges', fill=Count)) +
geom_tile() +
scale_fill_gradient(low='lightblue', high='darkblue', na.value='white')
ggplot(level_ranges_matrix, aes(x=Level, y=Rating Ranges, fill=Count)) +
df_count <- df2 %>% count(Level, ranges)
level_ranges_wideFormat <- dcast(df_count, Level ~ ranges, value.var = 'n')
level_ranges_matrix <- as.matrix(level_ranges_wideFormat[,-1])
rownames(level_ranges_matrix) <- level_ranges_wideFormat$Level
level_ranges_matrix <- melt(level_ranges_matrix, varnames=c("Level","Ranges"), value.name = 'Count')
ggplot(level_ranges_matrix, aes(x=Level, y=Ranges, fill=Count)) +
geom_tile() +
scale_fill_gradient(low='lightblue', high='darkblue', na.value='white') +
labs(y='Rating Ranges', title='Distribution of Courses by Level and Rating Ranges')
ggplot(level_ranges_matrix, aes(x=Level, y=Ranges, fill=Count)) +
geom_tile() +
geom_test(aes(label=Count), color='black') +
scale_fill_gradient(low='lightblue', high='darkblue', na.value='white') +
labs(y='Rating Ranges', title='Distribution of Courses by Level and Rating Ranges')
ggplot(level_ranges_matrix, aes(x=Level, y=Ranges, fill=Count)) +
geom_tile() +
geom_text(aes(label=Count), color='black') +
scale_fill_gradient(low='lightblue', high='darkblue', na.value='white') +
labs(y='Rating Ranges', title='Distribution of Courses by Level and Rating Ranges')
ggplot(level_ranges_matrix, aes(x=Level, y=Ranges, fill=Count)) +
geom_tile() +
geom_text(aes(label=Count), color='black') +
scale_fill_gradient(low='lightblue', high='blue', na.value='white') +
labs(y='Rating Ranges', title='Distribution of Courses by Level and Rating Ranges')
# Set up -----------------------------------------------------------------------
sessionInfo()
library(tidyverse)
library(zoo)
library(textcat)
getwd()
list.files(getwd())
unclean_data <- read.csv("CourseraDataset-Unclean.csv")
summary(unclean_data)
colnames(unclean_data)
unclean_data <- rename(unclean_data, crs_title = "Course.Title")
unclean_data <- rename(unclean_data, will_learn = "What.you.will.learn")
unclean_data <- rename(unclean_data, offered = "Offered.By")
unclean_data <- rename(unclean_data, URL = "Course.Url")
unclean_data <- rename(unclean_data, skill = "Skill.gain")
colnames(unclean_data)
knitr::opts_chunk$set(echo = TRUE)
unclean_data <- read.csv("CourseraDataset-Unclean.csv")
# Clean NA ---------------------------------------------------------------------
sapply(unclean_data, typeof)
unclean_data <- read.csv("CourseraDataset-Unclean.csv")
unclean_data <- read.csv("CourseraDataset-Unclean.csv")
unclean_data <- read.csv("CourseraDataset-Unclean.csv")
summary(unclean_data)
colnames(unclean_data)
unclean_data <- read.csv("CourseraDataset-Unclean.csv")
library(tidyverse)
library(zoo)
library(textcat)
orig_df <- read.csv("CourseraDataset-Unclean.csv")
summary(orig_df)
colnames(orig_df)
colSums(is.na(orig_df))
orig_df <- rename(orig_df, crs_title = "Course.Title")
orig_df <- rename(orig_df, will_learn = "What.you.will.learn")
orig_df <- rename(orig_df, offered = "Offered.By")
orig_df <- rename(orig_df, URL = "Course.Url")
orig_df <- rename(orig_df, skill = "Skill.gain")
colnames(orig_df)
orig_df <- rename(orig_df, crs_title = "Course.Title")
orig_df <- read.csv("CourseraDataset-Unclean.csv")
summary(orig_df)
colnames(orig_df)
library(tidyverse)
library(zoo)
library(textcat)
orig_df <- rename(orig_df, crs_title = "Course.Title")
orig_df <- rename(orig_df, will_learn = "What.you.will.learn")
orig_df <- rename(orig_df, offered = "Offered.By")
orig_df <- rename(orig_df, URL = "Course.Url")
orig_df <- rename(orig_df, skill = "Skill.gain")
colnames(orig_df)
sapply(orig_df, typeof)
print("Columns' names:")
colnames(orig_df)
print("Data type of columns:")
sapply(orig_df, typeof)
cat("Columns' names:")
colnames(orig_df)
cat("Data type of columns:")
sapply(orig_df, typeof)
cat("Columns' names:")
cat(colnames(orig_df))
cat("Data type of columns:")
sapply(orig_df, typeof)
cat("Columns' names:")
cat(colnames(orig_df), ' \n')
cat("Data type of columns:")
sapply(orig_df, typeof)
cat("Columns' names:")
cat(colnames(orig_df), '\n')
cat("Data type of columns:")
sapply(orig_df, typeof)
cat("Columns' names:")
cat(colnames(orig_df), ',\n')
cat("Data type of columns:")
sapply(orig_df, typeof)
cat("Columns' names:")
cat(colnames(orig_df), ',\n')
cat("Data type of columns:")
sapply(orig_df, typeof)
cat("Columns' names:")
cat(colnames(orig_df))
cat("Data type of columns:")
sapply(orig_df, typeof)
orig_df <- rename(orig_df, crs_title = "Course.Title")
data_types <- sapply(orig_df, typeof)
data_types <- sapply(orig_df, typeof)
results <- paste(names(orig_df), ":", data_types, collapse = ", ")
cat(results,'\n')
data_types <- sapply(orig_df, typeof)
results <- paste(names(orig_df), ":", data_types, collapse = ", ")
cat(results,'\n')
```
head(orig_df)
clean_NA_func <- function(input_df, colname, replace_value) {
input_df <- input_df %>% mutate(
!!sym(colname) := ifelse(
is.na(!!sym(colname)), replace_value, !!sym(colname)
)
)
return(input_df)
}
orig_df <- clean_NA_func(orig_df, "Review", 0)
colSums(is.na(orig_df))
orig_df <- clean_NA_func(orig_df, "Rating", 0)
colSums(is.na(orig_df))
# Clean Duplication -----------------------------------------------------------
## Purpose: there are rows with same link but different keywords => append the keyword together
sum(duplicated(unclean_data$URL))
unclean_data
unclean_data <- read.csv("CourseraDataset-Unclean.csv")
df <- unclean_data
orig_df <- clean_NA_func(orig_df, "Rating", 0)
colSums(is.na(orig_df))
getwd()
install.packages("tidyverse")
install.packages("zoo")
install.packages("textcat")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(zoo)
library(textcat)
sessionInfo()
knitr::clean_cache()
knitr::clean_cache()
knitr::opts_chunk$set(echo = TRUE)
knitr::clean_cache()
knitr::opts_chunk$set(echo = TRUE)
knitr::clean_cache()
wt <- 150
ht <- 68
bmi <- (wt*703)/ht**2
diameter <- 12
cost <- 8
area <- pi * (diameter/2)**2
dim <- 15
cost2 <- 12
area2 <- pi * (dim/2)**2
cost/area
cost2/area2
(14 * 0.51)**(1/2)
(14 * 0.51)**(1/3)
n <- 1:5
(14*0.51)**(1/n)
kg <- c(69,62,57,59,59,64,56,66,67,66)
lbs <- kg * 2.20462
mean(lbs)
lbs
hts <- c(62,58,61,61,59,64,63,61,60,62)
bmi <- (lbs*703)/hts**2
mean(bmi)
seq1 <- seq(from=0, to=1, by=0.1)
seq2 <- seq(from=10, to=1, by=-0.5)
rep(1:3, times = 3)
rep(c("a", "c", "e", "g"), each = 3)
rep(c("a", "c", "e", "g"), times = 3)
rep(1:3, each = 3, times = 2)
rep(1:5, times = 5:1)
rep(c(7, 2, 8, 1), times = c(4, 3, 1, 5))
child_names <- c('John','Jack','Jane')
ht <- c(63,59,60)
height_ord <- order(ht, decreasing = TRUE)
names_sort <- child_names[height_ord]
names_sort
child_names2 <- c('Alfred','Barbara','James','Jane','John','Judy','Louise','Mary','Ronald','William')
ht2 <- c(62,58,61,61,59,64,63,61,60,62)
ht_ord <- order(ht2, decreasing = TRUE)
names_sort2 <- child_names2[ht_ord]
names_sort2
mydata <- c(2,4,1,6,8,5,NA,4,7)
mean(mydata)
mean(mydata, na.rm = TRUE)
sessionInfo()
knitr::opts_chunk$set(echo = TRUE)
knitr::clean_cache()
orig_df <- read.csv("CourseraDataset-Unclean.csv")
summary(orig_df)
colnames(orig_df)
library(tidyverse)
library(zoo)
library(textcat)
library(conflicted)
sessionInfo()
library(tidyverse)
library(zoo)
library(textcat)
sessionInfo()
orig_df <- rename(orig_df, crs_title = "Course.Title")
orig_df <- rename(orig_df, will_learn = "What.you.will.learn")
orig_df <- rename(orig_df, offered = "Offered.By")
orig_df <- rename(orig_df, URL = "Course.Url")
orig_df <- rename(orig_df, skill = "Skill.gain")
data_types <- sapply(orig_df, typeof)
results <- paste(names(orig_df), ":", data_types, collapse = ", ")
cat(results,'\n')
head(orig_df)
colSums(is.na(orig_df))
clean_NA_func <- function(input_df, colname, replace_value) {
input_df <- input_df %>% mutate(
!!sym(colname) := ifelse(
is.na(!!sym(colname)), replace_value, !!sym(colname)
)
)
return(input_df)
}
summary(orig_df)
colSums(orig_df == "")
clean_empty_func <- function(input_df, colname, replace_value) {
input_df <- input_df %>% mutate(
!!sym(colname) := ifelse(
!!sym(colname) == "", replace_value, !!sym(colname)
)
)
}
sample <- orig_df
sample <- sapply(orig_df[c("Level","Duration","Schedule","will_learn","skill","Modules","Instructor")],function(col) clean_empty_func(col, "No information"))
columns_to_clean = c('Level','Duration','Schedule','will_learn','skill','Modules','Instructor')
sample <- orig_df
for (col in columns_to_clean) {
sample <- clean_empty_func(sample, col, 'No info')
}
colSums(sample == '')
summary(orig_df)
sum(duplicated(orig_df$URL))
clean_dup_func <- function(input_df, col_dup, col_append) {
while (sum(duplicated(input_df[, col_dup])) >= 1) {
dup_df <- input_df[which(duplicated(input_df[, col_dup])), ] # get df of duplicated rows of URL
link_1st_row <- as.character(dup_df[1, col_dup])
row_indices <- as.numeric(which(input_df[, col_dup] == link_1st_row)) # get rows having same links
row_indices_without_min <- row_indices[-which.min(row_indices)]
for (i in row_indices_without_min) {
input_df[min(row_indices), col_append] <- paste(
input_df[min(row_indices), col_append], input_df[i, col_append],
sep = ", "
)
}
input_df <- input_df[-row_indices_without_min, ]
}
return(input_df)
}
orig_df <- clean_dup_func(orig_df, "URL", "Keyword")
summary(orig_df)
orig_df$Keyword <- ifelse(
str_count(orig_df$Keyword, fixed("Social Sciences")) > 1, str_replace_all(
orig_df$Keyword, fixed("Social Sciences, Social Sciences"), "Social Sciences"
), orig_df$Keyword
)
unique(
(orig_df %>% mutate(
count_ss = str_count(orig_df$Keyword, fixed("Social Sciences"))
)
)$count_ss
)
view(orig_df)
colnames(orig_df)
?gsub
head(orig_df)
clean_sign_func <- function(input_df, colname, sign1, sign2 = "", sign3 = "") {
input_df[, colname] <- sapply(input_df[, colname], function(x) {
x <- gsub(paste0(fixed(sign1), "|", fixed(sign2), "|", fixed(sign3)), "", x)
})
return(input_df)
}
head(orig_df)
clean_sign_func <- function(input_df, colname, sign1, sign2 = "", sign3 = "") {
input_df[, colname] <- sapply(input_df[, colname], function(x) {
x <- gsub(paste0(fixed(sign1), "|", fixed(sign2), "|", fixed(sign3)), "", x)
})
return(input_df)
}
# Apply function
orig_df <- clean_sign_func(orig_df, "skill", "\\[", "\\]", "'")
orig_df <- clean_sign_func(orig_df, "Modules", "\\[", "\\]", "'")
orig_df <- clean_sign_func(orig_df, "Instructor", "\\[", "\\]", "'")
orig_df <- clean_sign_func(orig_df, "offered", "\\[", "\\]", "'")
view(orig_df)
view(orig_df)
orig_df %>% head(20)
orig_df %>% head(20) %>% select(Duration)
unique(orig_df$Duration)
knitr::opts_chunk$set(echo = TRUE)
knitr::clean_cache()
orig_df <- read.csv("CourseraDataset-Unclean.csv")
summary(orig_df)
colnames(orig_df)
library(tidyverse)
library(zoo)
library(textcat)
sessionInfo()
orig_df <- rename(orig_df, crs_title = "Course.Title")
orig_df <- rename(orig_df, will_learn = "What.you.will.learn")
orig_df <- rename(orig_df, offered = "Offered.By")
orig_df <- rename(orig_df, URL = "Course.Url")
orig_df <- rename(orig_df, skill = "Skill.gain")
data_types <- sapply(orig_df, typeof)
results <- paste(names(orig_df), ":", data_types, collapse = ", ")
cat(results,'\n')
head(orig_df)
colSums(is.na(orig_df))
clean_NA_func <- function(input_df, colname, replace_value) {
input_df <- input_df %>% mutate(
!!sym(colname) := ifelse(
is.na(!!sym(colname)), replace_value, !!sym(colname)
)
)
return(input_df)
}
orig_df <- clean_NA_func(orig_df, "Rating", 0)
colSums(is.na(orig_df))
colSums(orig_df == "")
clean_empty_func <- function(input_df, colname, replace_value) {
input_df <- input_df %>% mutate(
!!sym(colname) := ifelse(
!!sym(colname) == "", replace_value, !!sym(colname)
)
)
}
columns_to_clean = c('Level','Duration','Schedule','will_learn','skill','Modules','Instructor')
for (col in columns_to_clean) {
orig_df <- clean_empty_func(orig_df, col, 'No information')
}
colSums(sample == '')
orig_df$Review <- str_replace_all(orig_df$Review, fixed(" reviews"), "")
orig_df <- clean_empty_func(orig_df, 'Review', '0')
orig_df$Review <- as.double(orig_df$Review)
sum(duplicated(orig_df$URL))
clean_dup_func <- function(input_df, col_dup, col_append) {
while (sum(duplicated(input_df[, col_dup])) >= 1) {
dup_df <- input_df[which(duplicated(input_df[, col_dup])), ] # get df of duplicated rows of URL
link_1st_row <- as.character(dup_df[1, col_dup])
row_indices <- as.numeric(which(input_df[, col_dup] == link_1st_row)) # get rows having same links
row_indices_without_min <- row_indices[-which.min(row_indices)]
for (i in row_indices_without_min) {
input_df[min(row_indices), col_append] <- paste(
input_df[min(row_indices), col_append], input_df[i, col_append],
sep = ", "
)
}
input_df <- input_df[-row_indices_without_min, ]
}
return(input_df)
}
orig_df <- clean_dup_func(orig_df, "URL", "Keyword")
summary(orig_df)
orig_df$Keyword <- ifelse(
str_count(orig_df$Keyword, fixed("Social Sciences")) > 1, str_replace_all(
orig_df$Keyword, fixed("Social Sciences, Social Sciences"), "Social Sciences"
), orig_df$Keyword
)
unique(
(orig_df %>% mutate(
count_ss = str_count(orig_df$Keyword, fixed("Social Sciences"))
)
)$count_ss
)
head(orig_df)
clean_sign_func <- function(input_df, colname, sign1, sign2 = "", sign3 = "") {
input_df[, colname] <- sapply(input_df[, colname], function(x) {
x <- gsub(paste0(fixed(sign1), "|", fixed(sign2), "|", fixed(sign3)), "", x)
})
return(input_df)
}
# Apply function
orig_df <- clean_sign_func(orig_df, "skill", "\\[", "\\]", "'")
orig_df <- clean_sign_func(orig_df, "Modules", "\\[", "\\]", "'")
orig_df <- clean_sign_func(orig_df, "Instructor", "\\[", "\\]", "'")
orig_df <- clean_sign_func(orig_df, "offered", "\\[", "\\]", "'")
orig_df %>% head(20) %>% select(Duration)
unique(orig_df$Duration)
knitr::opts_chunk$set(echo = TRUE)
knitr::clean_cache()
orig_df <- read.csv("CourseraDataset-Unclean.csv")
summary(orig_df)
colnames(orig_df)
library(tidyverse)
library(zoo)
library(textcat)
sessionInfo()
orig_df <- rename(orig_df, crs_title = "Course.Title")
orig_df <- rename(orig_df, will_learn = "What.you.will.learn")
orig_df <- rename(orig_df, offered = "Offered.By")
orig_df <- rename(orig_df, URL = "Course.Url")
orig_df <- rename(orig_df, skill = "Skill.gain")
data_types <- sapply(orig_df, typeof)
results <- paste(names(orig_df), ":", data_types, collapse = ", ")
cat(results,'\n')
head(orig_df)
colSums(is.na(orig_df))
clean_NA_func <- function(input_df, colname, replace_value) {
input_df <- input_df %>% mutate(
!!sym(colname) := ifelse(
is.na(!!sym(colname)), replace_value, !!sym(colname)
)
)
return(input_df)
}
orig_df <- clean_NA_func(orig_df, "Rating", 0)
colSums(is.na(orig_df))
colSums(orig_df == "")
clean_empty_func <- function(input_df, colname, replace_value) {
input_df <- input_df %>% mutate(
!!sym(colname) := ifelse(
!!sym(colname) == "", replace_value, !!sym(colname)
)
)
}
columns_to_clean = c('Level','Duration','Schedule','will_learn','skill','Modules','Instructor')
for (col in columns_to_clean) {
orig_df <- clean_empty_func(orig_df, col, 'No information')
}
colSums(orig_df=="")
orig_df$Review <- str_replace_all(orig_df$Review, fixed(" reviews"), "")
orig_df <- clean_empty_func(orig_df, 'Review', '0')
orig_df$Review <- as.double(orig_df$Review)
sum(duplicated(orig_df$URL))
clean_dup_func <- function(input_df, col_dup, col_append) {
while (sum(duplicated(input_df[, col_dup])) >= 1) {
dup_df <- input_df[which(duplicated(input_df[, col_dup])), ] # get df of duplicated rows of URL
link_1st_row <- as.character(dup_df[1, col_dup])
row_indices <- as.numeric(which(input_df[, col_dup] == link_1st_row)) # get rows having same links
row_indices_without_min <- row_indices[-which.min(row_indices)]
for (i in row_indices_without_min) {
input_df[min(row_indices), col_append] <- paste(
input_df[min(row_indices), col_append], input_df[i, col_append],
sep = ", "
)
}
input_df <- input_df[-row_indices_without_min, ]
}
return(input_df)
}
orig_df <- clean_dup_func(orig_df, "URL", "Keyword")
summary(orig_df)
orig_df$Keyword <- ifelse(
str_count(orig_df$Keyword, fixed("Social Sciences")) > 1, str_replace_all(
orig_df$Keyword, fixed("Social Sciences, Social Sciences"), "Social Sciences"
), orig_df$Keyword
)
unique(
(orig_df %>% mutate(
count_ss = str_count(orig_df$Keyword, fixed("Social Sciences"))
)
)$count_ss
)
head(orig_df)
clean_sign_func <- function(input_df, colname, sign1, sign2 = "", sign3 = "") {
input_df[, colname] <- sapply(input_df[, colname], function(x) {
x <- gsub(paste0(fixed(sign1), "|", fixed(sign2), "|", fixed(sign3)), "", x)
})
return(input_df)
}
# Apply function
orig_df <- clean_sign_func(orig_df, "skill", "\\[", "\\]", "'")
orig_df <- clean_sign_func(orig_df, "Modules", "\\[", "\\]", "'")
orig_df <- clean_sign_func(orig_df, "Instructor", "\\[", "\\]", "'")
orig_df <- clean_sign_func(orig_df, "offered", "\\[", "\\]", "'")
orig_df %>% head(20) %>% select(Duration)
unique(orig_df$Duration)
