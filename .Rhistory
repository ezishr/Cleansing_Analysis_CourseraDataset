view(unclean_data)
# Clean Duration ---------------------------------------------------------------
## Get a copy version to testing
sample_df <- unclean_data
view(sample_df)
# Clean Duration ---------------------------------------------------------------
## Get a copy version to testing
sample_df <- unclean_data %>% select(Duration, URL)
view(sample_df)
sum(unique(unclean_data$URL))
count(unique(unclean_data$URL))
str_count(unique(unclean_data$URL))
unique(unclean_data$URL)
summary(sample_df)
sum(
str_detect(sample_df$Duration, "pprox")
)
## Get rows having approx words
approx_rows <- sample_df[which(str_detect(sample_df$Duration, "pprox")),]
sample_df <- unclean_data %>% select(Duration, URL)
view(unclean_data)
library(tidyverse)
library(zoo)
install.packages("textcat")
library(textcat)
getwd()
list.files(getwd())
unclean_data <- read.csv("CourseraDataset-Unclean.csv")
summary(unclean_data)
colnames(unclean_data)
# Set up -----------------------------------------------------------------------
sessionInfo()
sample_df <- unclean_data %>% select(Duration, URL)
rlang::last_trace()
rlang::last_trace(drop = FALSE)
#FINALIZE CLEANSING UNTIL THIS STEP
orig_df <- read.csv("CourseraDataset-Unclean.csv")
view(orig_df)
orig_df <- rename(unclean_data, skill = "Skill.gain")
colnames(orig_df)
orig_df <- rename(orig_df, skill = "Skill.gain")
colnames(orig_df)
## Clean NA for Rating col
clean_NA_func <- function(input_df, colname, replace_value) {
input_df <- input_df %>% mutate (
!!sym(colname) <- ifelse(
is.na(!!sym(colname)), replace_value, !!sym(colname))
)
return(input_df)
}
orig_df <- clean_NA_func(orig_df,"Rating", "No information")
view(orig_df)
input_df <- input_df %>% mutate (
!!sym(colname) := ifelse(
is.na(sym(colname)), replace_value, !!sym(colname))
)
## Clean NA for Rating col
clean_NA_func <- function(input_df, colname, replace_value) {
input_df <- input_df %>% mutate (
!!sym(colname) := ifelse(
is.na(sym(colname)), replace_value, !!sym(colname))
)
return(input_df)
}
orig_df <- clean_NA_func(orig_df,"Rating", "No information")
view(orig_df)
#FINALIZE CLEANSING UNTIL THIS STEP
orig_df <- read.csv("CourseraDataset-Unclean.csv")
## Set columns name
orig_df <- rename(orig_df, crs_title = "Course.Title")
orig_df <- rename(orig_df, will_learn = "What.you.will.learn")
orig_df <- rename(orig_df, offered = "Offered.By")
orig_df <- rename(orig_df, URL = "Course.Url")
orig_df <- rename(orig_df, skill = "Skill.gain")
colnames(orig_df)
## Clean NA for Rating col
clean_NA_func <- function(input_df, colname, replace_value) {
input_df <- input_df %>% mutate (
!!sym(colname) := ifelse(
is.na(sym(colname)), replace_value, !!sym(colname))
)
return(input_df)
}
orig_df <- clean_NA_func(orig_df,"Rating", "No information")
view(orig_df)
return(input_df)
## Clean NA for Rating col
clean_NA_func <- function(input_df, colname, replace_value){
input_df <- input_df %>% mutate(
!!sym(colname) := ifelse(
is.na(!!sym(colname)), replace_value, !!sym(colname)
)
)
return(input_df)
}
# FINALIZE CLEANSING UNTIL THIS STEP -------------------------------------------
orig_df <- read.csv("CourseraDataset-Unclean.csv")
view(orig_df)
orig_df <- rename(orig_df, crs_title = "Course.Title")
orig_df <- rename(orig_df, will_learn = "What.you.will.learn")
orig_df <- rename(orig_df, offered = "Offered.By")
orig_df <- rename(orig_df, URL = "Course.Url")
orig_df <- rename(orig_df, skill = "Skill.gain")
colnames(orig_df)
## Clean NA for Rating col
clean_NA_func <- function(input_df, colname, replace_value){
input_df <- input_df %>% mutate(
!!sym(colname) := ifelse(
is.na(!!sym(colname)), replace_value, !!sym(colname)
)
)
return(input_df)
}
colSums(is.na(orig_df))
a_df <- clean_NA_func(orig_df,"Rating", "No information")
view(a_df)
orig_df <- clean_NA_func(orig_df,"Rating", "No information")
view(orig_df)
## Clean Empty for Instructor col
colSums(orig_df == "")
clean_empty_func <- function(input_df, colname, replace_value) {
input_df <- input_df %>% mutate(
!!sym(colname) := ifelse(
!!sym(colname) == "", replace_value, !!sym(colname)
)
)
return(input_df)
}
a_df <- clean_empty_func(orig_df, "Instructor", "No information")
view(a_df)
view(orig_df)
unique(a_df$Instructor)
colSums(a_df$Instructor == "No information")
colSums(a_df == "No information")
unclean <- read.csv("CourseraDataset-Unclean.csv,")
unclean <- read.csv("CourseraDataset-Unclean.csv")
colSums(unclean == "No information")
colSums(unclean == "")
## Clean Empty for Instructor col
colSums(orig_df == "")
clean_empty_func <- function(input_df, colname, replace_value) {
input_df <- input_df %>% mutate(
!!sym(colname) := ifelse(
!!sym(colname) == "", replace_value, !!sym(colname)
)
)
}
df <- clean_empty_func(orig_df, "Level", "No information")
colSums(df == "No information")
colSums(orig_df == "")
## Clean duplicated URL
### Purpose: there are rows with same link but different keywords => append the keyword together
clean_dup_func <- function(input_df, col_dup, col_append){
while( sum( duplicated(input_df[,col_dup] ) ) >= 1){
dup_df <- input_df[which( duplicated(input_df[,col_dup]) ),] # get df of duplicated rows of URL
link_1st_row <- as.character(dup_df[1, col_dup])
row_indices <- as.numeric(which( input_df[,col_dup] == link_1st_row )) # get rows having same links
row_indices_without_min <- row_indices[-which.min(row_indices)]
for (i in row_indices_without_min){
input_df[min(row_indices), col_append] <- paste(
input_df[min(row_indices), col_append], input_df[i, col_append], sep = ", "
)
}
input_df <- input_df[-row_indices_without_min,]
}
return(input_df)
}
orig_df <- clean_dup_func(orig_df, "URL", "Keyword")
view(orig_df)
summary(orig_df)
## Clean "Social Sciences" duplication in Keyword col
orig_df$Keyword <- ifelse(
str_count(orig_df$Keyword, fixed("Social Sciences")) > 1, str_replace_all(
orig_df$Keyword, fixed("Social Sciences, Social Sciences"), "Social Sciences"
), orig_df$Keyword
)
orig_df %>% mutate(
count_ss = str_count(orig_df$Keyword, fixed("Social Sciences"))
)
unique((orig_df %>% mutate(
count_ss = str_count(orig_df$Keyword, fixed("Social Sciences"))
))$Keyword)
unique((orig_df %>% mutate(
count_ss = str_count(orig_df$Keyword, fixed("Social Sciences"))
))$count_ss)
view(orig_df)
view(unclean_data)
view(orig_df)
sessionInfo()
sessionInfo()
library(tidyverse)
library(zoo)
install.packages("textcat")
library(textcat)
getwd()
list.files(getwd())
orig_df <- read.csv("CourseraDataset-Unclean.csv")
view(orig_df)
orig_df <- rename(orig_df, crs_title = "Course.Title")
orig_df <- rename(orig_df, will_learn = "What.you.will.learn")
orig_df <- rename(orig_df, offered = "Offered.By")
orig_df <- rename(orig_df, URL = "Course.Url")
orig_df <- rename(orig_df, skill = "Skill.gain")
colnames(orig_df)
## Clean NA for Rating col
clean_NA_func <- function(input_df, colname, replace_value){
input_df <- input_df %>% mutate(
!!sym(colname) := ifelse(
is.na(!!sym(colname)), replace_value, !!sym(colname)
)
)
return(input_df)
}
colSums(is.na(orig_df))
orig_df <- clean_NA_func(orig_df,"Rating", "No information")
view(orig_df)
colSums(is.na(orig_df))
## Clean Empty for Instructor col
colSums(orig_df == "")
clean_empty_func <- function(input_df, colname, replace_value) {
input_df <- input_df %>% mutate(
!!sym(colname) := ifelse(
!!sym(colname) == "", replace_value, !!sym(colname)
)
)
}
orig_df <- clean_empty_func(orig_df, "Level", "No information")
## Clean Empty for Instructor col
colSums(orig_df == "")
## Clean duplicated URL
### Purpose: there are rows with same link but different keywords => append the keyword together
clean_dup_func <- function(input_df, col_dup, col_append){
while( sum( duplicated(input_df[,col_dup] ) ) >= 1){
dup_df <- input_df[which( duplicated(input_df[,col_dup]) ),] # get df of duplicated rows of URL
link_1st_row <- as.character(dup_df[1, col_dup])
row_indices <- as.numeric(which( input_df[,col_dup] == link_1st_row )) # get rows having same links
row_indices_without_min <- row_indices[-which.min(row_indices)]
for (i in row_indices_without_min){
input_df[min(row_indices), col_append] <- paste(
input_df[min(row_indices), col_append], input_df[i, col_append], sep = ", "
)
}
input_df <- input_df[-row_indices_without_min,]
}
return(input_df)
}
orig_df <- clean_dup_func(orig_df, "URL", "Keyword")
summary(orig_df)
## Clean "Social Sciences" duplication in Keyword col
orig_df$Keyword <- ifelse(
str_count(orig_df$Keyword, fixed("Social Sciences")) > 1, str_replace_all(
orig_df$Keyword, fixed("Social Sciences, Social Sciences"), "Social Sciences"
), orig_df$Keyword
)
unique(
(orig_df %>% mutate(
count_ss = str_count(orig_df$Keyword, fixed("Social Sciences")))
)$count_ss
) ###check
?sapply
## Clean specific signs [,],'
clean_sign_func <- function(input_df, colname, sign1, sign2 = "", sign3 = "") {
input_df[,coluname] <- sappply(input_df[,colname], function(x) {
x <- gsub(paste0(fixed(sign1), "|", fixed(sign2), "|", fixed(sign3)), "", x)
})
return(input_df)
}
testing <- orig_df
testing <- clean_sign_func(testing, "skill", "[", "]", "'")
input_df[,coluname] <- sapply(input_df[,colname], function(x) {
x <- gsub(paste0(fixed(sign1), "|", fixed(sign2), "|", fixed(sign3)), "", x)
})
## Clean specific signs [,],'
clean_sign_func <- function(input_df, colname, sign1, sign2 = "", sign3 = "") {
input_df[,coluname] <- sapply(input_df[,colname], function(x) {
x <- gsub(paste0(fixed(sign1), "|", fixed(sign2), "|", fixed(sign3)), "", x)
})
return(input_df)
}
testing <- clean_sign_func(testing, "skill", "[", "]", "'")
## Clean specific signs [,],'
clean_sign_func <- function(input_df, colname, sign1, sign2 = "", sign3 = "") {
input_df[,colname] <- sapply(input_df[,colname], function(x) {
x <- gsub(paste0(fixed(sign1), "|", fixed(sign2), "|", fixed(sign3)), "", x)
})
return(input_df)
}
testing <- clean_sign_func(testing, "skill", "[", "]", "'")
view(testint)
view(testing)
testing <- clean_sign_func(testing, "skill", "\\[", "\\]", ",")
view(testing)
testing <- orig_df
testing <- clean_sign_func(testing, "skill", "\\[", "\\]", "'")
view(testing)
orig_df <- clean_sign_func(orig_df, "skill", "\\[", "\\]", "'")
view(orig_df)
orig_df <- clean_sign_func(orig_df, "skill", "\\[", "\\]", "'")
view(orig_df)
## Clean word "reviews" in Review col
colnames(orig_df)
?str_replace_all
orig_df$Review <- str_replace_all(orig_df$Review, fixed(" reviews"), "")
view(orig_df)
# CLEAN DURATION ---------------------------------------------------------------
## Get a copy version to testing
df <- orig_df
summary(df)
view(df)
orig_df <- clean_sign_func(orig_df, "Modules", "\\[", "\\]", "'")
orig_df <- clean_sign_func(orig_df, "Instructor", "\\[", "\\]", "'")
orig_df <- clean_sign_func(orig_df, "offered", "\\[", "\\]", "'")
# CLEAN DURATION ---------------------------------------------------------------
## Get a copy version to testing
df <- orig_df
view(df)
orig_df <- clean_empty_func(orig_df, "Review", 0)
view(orig_df)
## Clean Empty for Level col
colSums(orig_df == "")
unique(orig_df$Schedule)
orig_df <- clean_empty_func(orig_df, "Schedule", "No information")
orig_df <- clean_empty_func(orig_df, "Duration", "No information")
## Clean Empty for Level col
colSums(orig_df == "")
orig_df <- clean_empty_func(orig_df, "Modules", "No information")
orig_df <- clean_empty_func(orig_df, "Instructor", "No information")
view(orig_df)
## Clean Empty for Level col
colSums(orig_df == "")
orig_df <- clean_empty_func(orig_df, "will_learn", "No information")
orig_df <- clean_empty_func(orig_df, "skill", "No information")
## Clean Empty for Level col
colSums(orig_df == "")
# CLEAN DURATION ---------------------------------------------------------------
## Get a copy version to testing
df <- orig_df
summary(df)
view(df)
## Change type of Review col
as.double(orig_df$Review)
# CLEAN DURATION ---------------------------------------------------------------
## Get a copy version to testing
df <- orig_df
summary(df)
## Change type of Review col
as.double(orig_df$Review)
## Change type of Review col
colSums(is.na(orig_df))
## Change type of Review col
orig_df$Review <- as.double(orig_df$Review)
summary(orig_df)
# CLEAN DURATION ---------------------------------------------------------------
## Get a copy version to testing
df <- orig_df
summary(df)
view(df)
## Get rows having approx words
approx_rows <- sample_df[which(str_detect(sample_df$Duration, "pprox")),c("Duration", "URL")]
view(approx_rows)
## Get rows having approx words
approx_rows <- df[which(str_detect(df$Duration, "pprox")),c("Duration", "URL")]
view(approx_rows)
approx_rows <- approx_rows[order(approx_rows$Duration),]
view(approx_rows)
unique(approx_rows$Duration)
colSums(is.na(orig_df))
orig_df <- clean_NA_func(orig_df,"Review", 0)
view(orig_df)
colSums(is.na(orig_df))
# CLEAN DURATION ---------------------------------------------------------------
## Get a copy version to testing
df <- orig_df
## Get rows having approx words
approx_rows <- df[which(str_detect(df$Duration, "pprox")),c("Duration", "URL")]
view(approx_rows)
approx_rows <- approx_rows[order(approx_rows$Duration),]
unique(approx_rows$Duration)
view(approx_rows)
approx_rows[which.max(nchar(approx_rows$Duration)), "Duration"] <- 2
unique(approx_rows$Duration)
df <- orig_df
summary(df)
view(df)
## Get rows having approx words
approx_rows <- df[which(str_detect(df$Duration, "pprox")),c("Duration", "URL")]
approx_rows <- approx_rows[order(approx_rows$Duration),]
unique(approx_rows$Duration)
## Change the longest row to n
approx_rows[which.max(nchar(approx_rows$Duration)), "Duration"] <- "2 hours"
unique(approx_rows$Duration)
?gsub
approx_rows[,"Duration"] <- gsub("[^0-9]", "", approx_rows[,"Duration"])
unique(approx_rows$Duration)
approx_rows[, "Duration"] <- paste0(approx_rows[,"Duration"], " hours")
unique(approx_rows$Duration)
approx_rows %>% mutate(
category = "Approximately"
)
view(approx_rows)
approx_rows <- approx_rows %>% mutate(
category = "Approximately"
)
view(approx_rows)
view(df)
df2 <- df
df2 <- left_join(df2, approx_rows, by="URL")
df2
view(df3)
view(df2)
summary(df2)
df2 <- df
matches <- grepl("pprox", df2$Duration)
df2[matches, "Duration"] <- approx_rows$Duration
view(df2)
summary(df2)
unique(df2$Duration)
view(df)
df2 <- df
view(df2)
matches <- grepl("pprox", df2$Duration)
df2[matches, "Duration"] <- approx_rows$Duration
view(df2)
## Get rows having approx words
approx_rows <- df[which(str_detect(df$Duration, "pprox")),c("Duration", "URL")]
view(approx_rows)
unique(approx_rows$Duration)
## Change the longest row to n
approx_rows[which.max(nchar(approx_rows$Duration)), "Duration"] <- "2 hours"
approx_rows[,"Duration"] <- gsub("[^0-9]", "", approx_rows[,"Duration"])
approx_rows[, "Duration"] <- paste0(approx_rows[,"Duration"], " hours")
approx_rows <- approx_rows %>% mutate(
category = "Approximately"
)
df2 <- df
matches <- grepl("pprox", df2$Duration)
df2[matches, "Duration"] <- approx_rows$Duration
view(df2)
matches <- grepl("pprox", df$Duration)
df[matches, "Duration"] <- approx_rows$Duration
view(df2)
summary(df)
view(df)
df2 <- df
df2 <- df2[order(df2$Duration)]
df2 <- df2[order(df2$Duration),]
view(df3)
view(df2)
df <- df[order(df$Duration),]
view(df)
unique(df$Duration)
df[which(df$Duration == "1 hour "), "Duration"] <- "1 hour"
unique(df$Duration)
df <- left_join(df, approx_rows$category, by = "URL")
df <- left_join(df, approx_rows[,c("category", "URL")], by = "URL")
view(df)
unique(df$Duration)
df[which(df$Duration == "one hour "), "Duration"] <- "1 hour"
unique(df$Duration)
df[which(df$Duration == "one hour"), "Duration"] <- "1 hour"
unique(df$Duration)
## Get rows having following words: month, week, at
month_df <- df[which(str_detect(df$Duration, paste0(fixed("month"), "|", fixed("week"), "|", fixed("at")))), c("Duration", "URL", "category")]
view(month_df)
unique(month_df$category)
unique(month_df$Duration)
## Get rows having following words: month, week, at
month_df <- df[which(str_detect(df$Duration, paste0(fixed("month"), "|", fixed("week"), "|", fixed(" at ")))), c("Duration", "URL", "category")]
view(month_df)
unique(month_df$Duration)
month_df[which(month_df$Duration == "1 week of study, 2 hours"), "category"] <- week
month_df[which(month_df$Duration == "1 week of study, 2 hours"), "category"] <- "Week"
month_df[which(month_df$Duration == "1 week of study, 2 hours"), "category"] <- "Hours"
month_df[which(month_df$Duration == "1 week of study, 2 hours"), "Duration"] <- "14 hours"
unique(month_df$Duration)
month_df[which(str_detect(month_df$Duration, fixed("month"))), "Duration"] <- gsub(" month.*", "", month_df$Duration)
summary(month_df)
month_df[which(str_detect(month_df$Duration, fixed("month"))), "Duration"] <- gsub(" month.*", "", month_df[which(str_detect(month_df$Duration, fixed("month"))), "Duration"])
unique(month_df)
unique(month_df$Duration)
month_df[which(!str_detect(month_df$Duration, fixed("hours"))),"Duration"] <- paste0(month_df[which(!str_detect(month_df$Duration, fixed("hours")))], "months")
month_df[which(!str_detect(month_df$Duration, fixed("hours"))),"Duration"] <- paste0(month_df[which(!str_detect(month_df$Duration, fixed("hours"))), "Duration"], "months")
unique(month_df$Duration)
month_df <- df[which(str_detect(df$Duration, paste0(fixed("month"), "|", fixed("week"), "|", fixed(" at ")))), c("Duration", "URL", "category")]
view(month_df)
unique(month_df$Duration)
month_df[which(month_df$Duration == "1 week of study, 2 hours"), "category"] <- "Hours"
month_df[which(month_df$Duration == "1 week of study, 2 hours"), "Duration"] <- "14 hours"
summary(month_df)
month_df[which(str_detect(month_df$Duration, fixed("month"))), "Duration"] <- gsub(" month.*", "", month_df[which(str_detect(month_df$Duration, fixed("month"))), "Duration"])
unique(month_df$Duration)
month_df[which(!str_detect(month_df$Duration, fixed("hours"))),"Duration"] <- paste0(month_df[which(!str_detect(month_df$Duration, fixed("hours"))), "Duration"], " months")
unique(month_df$Duration)
month_df[which(month_df$Duration == "1 months"), "Duration"] <- "1 month"
unique(month_df$Duration)
view(month_df)
month_df[which(str_detect(month_df$Duration, fixed("month"))), "category"] <- "Months"
view(month_df)
matching <- grepl(paste0(fixed("month"), "|", fixed("week"), "|", fixed(" at ")), df$Duration)
df[matching, "Duration"] <- month_df$Duration
unique(df$Duration)
view(df)
view(df[which(str_detect(df$Duration, fixed("month"))),])
merge_df <- left_join(df, month_df, by = "URL")
view(merge_df)
view(df[which(str_detect(df$Duration, fixed("month"))),])
df[which(str_detect(df$Duration, fixed("month"))), "category"] <- "Months"
view(df)
view(df[which(str_detect(df$Duration, fixed("month"))),])
unique(df$category)
view(df[which(str_detect(df$Duration, fixed("hour"))),])
month_df[which(month_df$Duration == "1 months"), "Duration"] <- "1 month"
