total_duration <- function(value){
if(value != 'No information'){
hours <- as.numeric((
str_extract(value, "(?<=\\b)\\d+(?=\\s+hours?\\b)")
))
minutes <- as.numeric((
str_extract(value, "(?<=\\b)\\d+(?=\\s+minutes?\\b)")
))
months <- as.numeric((
str_extract(value, "(?<=\\b)\\d+(?=\\s+months?\\b)")
))
hours <- ifelse(is.na(hours),0,hours)
minutes <- ifelse(is.na(minutes),0,minutes)
months <- ifelse(is.na(months),0,months)
total_hours <- hours + minutes/60 + months*720
} else {next}
return(round(total_hours,2))
}
exp <- '20 hours 14 minutes 4 months'
test <- total_duration(exp)
df2 %>% mutate(
hours_spent = sapply(Duration,total_duration)
)
if(value != 'No information'){
hours <- as.numeric((
str_extract(value, "(?<=\\b)\\d+(?=\\s+hours?\\b)")
))
minutes <- as.numeric((
str_extract(value, "(?<=\\b)\\d+(?=\\s+minutes?\\b)")
))
months <- as.numeric((
str_extract(value, "(?<=\\b)\\d+(?=\\s+months?\\b)")
))
hours <- ifelse(is.na(hours),0,hours)
minutes <- ifelse(is.na(minutes),0,minutes)
months <- ifelse(is.na(months),0,months)
total_hours <- hours + minutes/60 + months*720
} else {return(NA)}
total_duration <- function(value){
if(value != 'No information'){
hours <- as.numeric((
str_extract(value, "(?<=\\b)\\d+(?=\\s+hours?\\b)")
))
minutes <- as.numeric((
str_extract(value, "(?<=\\b)\\d+(?=\\s+minutes?\\b)")
))
months <- as.numeric((
str_extract(value, "(?<=\\b)\\d+(?=\\s+months?\\b)")
))
hours <- ifelse(is.na(hours),0,hours)
minutes <- ifelse(is.na(minutes),0,minutes)
months <- ifelse(is.na(months),0,months)
total_hours <- hours + minutes/60 + months*720
} else {return(NA)}
return(round(total_hours,2))
}
df2 %>% mutate(
hours_spent = sapply(Duration,total_duration)
)
view(df%>%select(Duration, hours_spent))
df2 <- df2 %>% mutate(
hours_spent = sapply(Duration,total_duration)
)
view(df2)
view(df2 %>% select(Duration, hours_spent))
total_duration <- function(value){
if(value != 'No information'){
hours <- as.numeric((
str_extract(value, "(?<=\\b)\\d+(\\.\\d+)?(?=\\s+hours?\\b)")
))
minutes <- as.numeric((
str_extract(value, "(?<=\\b)\\d+(\\.\\d+)?(?=\\s+minutes?\\b)")
))
months <- as.numeric((
str_extract(value, "(?<=\\b)\\d+(\\.\\d+)?(?=\\s+months?\\b)")
))
hours <- ifelse(is.na(hours),0,hours)
minutes <- ifelse(is.na(minutes),0,minutes)
months <- ifelse(is.na(months),0,months)
total_hours <- hours + minutes/60 + months*720
} else {return(NA)}
return(round(total_hours,2))
}
df2 <- df2 %>% mutate(
hours_spent = sapply(Duration,total_duration)
)
view(df2 %>% select(Duration, hours_spent))
total_duration <- function(value){
if(value != 'No information'){
hours <- as.numeric((
str_extract(value, "(?<=\\b)\\d+(\\.\\d+)?(?=\\s+hours?\\b)")
))
minutes <- as.numeric((
str_extract(value, "(?<=\\b)\\d+(\\.\\d+)?(?=\\s+minutes?\\b)")
))
months <- as.numeric((
str_extract(value, "(?<=\\b)\\d+(\\.\\d+)?(?=\\s+months?\\b)")
))
hours <- ifelse(is.na(hours),0,hours)
minutes <- ifelse(is.na(minutes),0,minutes)
months <- ifelse(is.na(months),0,months)
total_hours <- hours + minutes/60 + months*720
} else {return(0)}
return(round(total_hours,2))
}
df2 <- df2 %>% mutate(
hours_spent = sapply(Duration,total_duration)
)
average_time_df <- df2 %>% groupby(Level)
average_time_df <- df2 %>% groupby(Level) %>%
mean(hours_spent)
average_time_df <- df2 %>% group_by(Level) %>%
mean(hours_spent)
summary(df2)
average_time_df <- df2 %>% group_by(Level) %>%
summarize(mean(hours_spent))
average_time_df
average_time_df <- df2 %>% group_by(Level) %>%
summarize(average_time = mean(hours_spent))
average_time_df
ggplot(average_time_df, aes(x=Level, y=average_time, fill=Level)) +
geom_col()
ggplot(average_time_df, aes(x=Level, y=average_time, fill=Level)) +
geom_col() +
labs(title='Average Time Spent for a Course by Level', y='Average Time')
average_time_level <- ggplot(average_time_df, aes(x=Level, y=average_time, fill=Level)) +
geom_col() +
labs(title='Average Time Spent for a Course by Level', y='Average Time')
ggpot(df2, aes(x=Level, y=hours_spent)) +
geom_boxplot()
ggplot(df2, aes(x=Level, y=hours_spent)) +
geom_boxplot()
ggplot(df2, aes(x=Level, y=hours_spent)) +
geom_violin()
level_hoursSpent_matrix = dcast(df2, Level ~ ranges, value.var = 'hours_spent')
install.packages(rshape2)
install.packages("reshape2")
library(reshape2)
level_hoursSpent_matrix = dcast(df2, Level ~ ranges, value.var = 'hours_spent')
level_hoursSpent_matrix = dcast(df2, ranges~Level, value.var = 'hours_spent')
level_visual
ggplot(df, aes(x = Level, fill = Level)) +
geom_col() +
labs(y = "Course count") +
ggtitle("Courses vs. Level")
# Visualization: number of course vs. level-------------------------------------
sample <- df %>%
level_visual <- ggplot(df, aes(x = Level, fill = Level)) +
geom_bar(stat='identity') +
labs(y = "Course count") +
ggtitle("Courses vs. Level")
# Visualization: number of course vs. level-------------------------------------
sample <- df %>%
level_visual <- ggplot(df, aes(x = Level, fill = Level)) +
geom_bar(stat='identity') +
labs(y = "Course count") +
ggtitle("Courses vs. Level")
level_visual <- ggplot(df, aes(x = Level, fill = Level)) +
geom_bar(stat='identity') +
labs(y = "Course count") +
ggtitle("Courses vs. Level")
level_visual
level_visual <- ggplot(df, aes(x = Level, fill = Level)) +
geom_bar() +
labs(y = "Course count") +
ggtitle("Courses vs. Level")
level_visual
# Visualization: number of course vs. level-------------------------------------
df_count <- df %>% mutate(
count = count(Level)
)
# Visualization: number of course vs. level-------------------------------------
df_count <- df %>% mutate(
count = count(Level)
)
# Visualization: number of course vs. level-------------------------------------
df_count <- df %>% count = count(Level)
# Visualization: number of course vs. level-------------------------------------
df_count <- df %>% count = count(Level)
view(df)
# Visualization: number of course vs. level-------------------------------------
df_count <- df %>% count(Level)
df_count
df_count <- df_count %>% mutate(
Level = reorder(Level, n)
)
df_count
# Visualization: number of course vs. level-------------------------------------
df_count <- df %>% count(Level)
df_count <- df_count %>% mutate(
Level = reorder(Level, n)
)
df_count
df_count <- df_count %>% mutate(
Level = reorder(Level, -n)
)
df_count
level_visual <- ggplot(df, aes(x = Level, y=n, fill = Level)) +
geom_bar(stat='identity') +
labs(y = "Course count") +
ggtitle("Courses vs. Level")
level_visual
colnames(df_count)
# Visualization: number of course vs. level-------------------------------------
df_count <- df %>% count(Level)
level_visual <- ggplot(df, aes(x = Level, y=n, fill = Level)) +
geom_bar(stat='identity') +
labs(y = "Course count") +
ggtitle("Courses vs. Level")
level_visual
df_count <- df_count %>% mutate(Level = factor(Level, levels = Level[order(-n)]))
df_count
level_visual <- ggplot(df, aes(x = Level, y=n, fill = Level)) +
geom_bar(stat='identity') +
labs(y = "Course count") +
ggtitle("Courses vs. Level")
level_hoursSpent_matrix
level_visual
level_visual <- ggplot(df_count, aes(x = Level, y=n, fill = Level)) +
geom_bar(stat='identity') +
labs(y = "Course count") +
ggtitle("Courses vs. Level")
level_visual
# Visualization: number of course vs. level-------------------------------------
df_count <- df %>% count(Level)
df_count <- df_count %>% mutate(
Level = reorder(Level, -n)
)
level_visual <- ggplot(df_count, aes(x = Level, y=n, fill = Level)) +
geom_bar(stat='identity') +
labs(y = "Course count") +
ggtitle("Courses vs. Level")
level_vis
level_visual
# Visualization: Count of offered ----------------------------------------------
sample <- df %>% count(offered) %>% arrange(desc(n)) %>% head(5)
sample
df_rating
rating_visual <- ggplot(df_rating, aes(x = ranges, y = n, fill = ranges)) +
geom_col() +
labs(x = "Rating ranges", y = "Courses", fill = "Rating ranges") +
ggtitle("Course vs. Rating")
rating_visual
View(level_hoursSpent_matrix)
average_time_level
ggplot(level_hoursSpent_matrix, aes(x=ranges, y=Level, fill=hours_spent)) + geom_tile()
> ggplot(level_hoursSpent_matrix, aes(x=ranges, y=Level, fill=hours_spent)) + geom_tile() + scale_fill_gradient(low='white', high='blue')
ggplot(level_hoursSpent_matrix, aes(x=ranges, y=Level, fill=hours_spent)) + geom_tile() + scale_fill_gradient(low='white', high='blue')
df2 %>% count(Level, ranges)
df_count <- df2 %>% count(Level, ranges)
level_hoursSpent_matrix = dcast(df2, Level ~ ranges, value.var = n)
level_hoursSpent_matrix = dcast(df_count, Level ~ ranges, value.var = n)
level_hoursSpent_matrix = dcast(df_count, Level ~ ranges, value.var = 'n')
View(level_hoursSpent_matrix)
level_ranges_matrix = dcast(df_count, Level ~ ranges, value.var = 'n')
View(level_ranges_matrix)
View(level_hoursSpent_matrix)
View(level_hoursSpent_matrix)
level_ranges_wideFormat <- dcast(df_count, Level ~ ranges, value.var = 'n')
level_ranges_matrix <- as.matrix(level_ranges_wideFormat)
level_ranges_matrix <- as.matrix(level_ranges_wideFormat[,-1])
View(level_ranges_matrix)
View(level_ranges_wideFormat)
rownames(level_ranges_matrix) <- level_ranges_wideFormat$Level
View(level_ranges_matrix)
melt(level_ranges_matrix, varnames=c("Level","Ranges"), value.name = 'Count')
df2 %>% count(Level, ranges)
sample <- df %>% count(Level, ranges)
ggplot(sample, aes(x=Level, y=ranges, fill=n)) +
geom_tile() +
scale_fill_gradient(low='pink', high='blue')
ggplot(sample, aes(x=Level, y=ranges, fill=n)) +
geom_tile() +
scale_fill_gradient(low='pink', high='blue', na.value = 'white')
ggplot(sample, aes(x=Level, y=ranges, fill=n)) +
geom_tile() +
scale_fill_gradient(low='pink', high='blue', na.value = 'white')
ggplot(sample, aes(x=Level, y=ranges, fill=n)) +
geom_tile() +
scale_fill_gradient(low='pink', high='blue', na.value = 'red')
ggplot(sample, aes(x=Level, y=ranges, fill=n)) +
geom_tile() +
scale_fill_gradient(low='pink', high='blue', na.value = 'red')
sample <- df %>% count(Level, ranges)
ggplot(sample, aes(x=Level, y=ranges, fill=n)) +
geom_tile() +
scale_fill_gradient(low='pink', high='blue', na.value = 'red')
level_ranges_matrix <- melt(level_ranges_matrix, varnames=c("Level","Ranges"), value.name = 'Count')
ggplot(level_ranges_matrix, aes(x=Level, y=Ranges, fill=Count)) +
geom_tile() +
scale_fill_gradient(low='pink', high='blue')
ggplot(level_ranges_matrix, aes(x=Level, y=Ranges, fill=Count)) +
geom_tile() +
scale_fill_gradient(low='pink', high='blue', na.value='red')
ggplot(level_ranges_matrix, aes(x=Level, y=Ranges, fill=Count)) +
geom_tile() +
scale_fill_gradient(low='white', high='blue', na.value='red')
ggplot(level_ranges_matrix, aes(x=Level, y=Ranges, fill=Count)) +
geom_tile() +
scale_fill_viridis(name = "Count", option = "D")
ggplot(level_ranges_matrix, aes(x=Level, y=Ranges, fill=Count)) +
geom_tile() +
scale_fill_gradient(low='lightblue', high='darkblue', na.value='red')
ggplot(level_ranges_matrix, aes(x=Level, y=Ranges, fill=Count)) +
geom_tile() +
scale_fill_gradient(low='lightblue', high='darkblue', na.value='white')
df_count <- df2 %>% count(Level, ranges)
level_ranges_wideFormat <- dcast(df_count, Level ~ ranges, value.var = 'n')
level_ranges_matrix <- as.matrix(level_ranges_wideFormat[,-1])
rownames(level_ranges_matrix) <- level_ranges_wideFormat$Level
level_ranges_matrix <- melt(level_ranges_matrix, varnames=c("Level","Rating Ranges"), value.name = 'Count')
ggplot(level_ranges_matrix, aes(x=Level, y='Rating Ranges', fill=Count)) +
geom_tile() +
scale_fill_gradient(low='lightblue', high='darkblue', na.value='white')
ggplot(level_ranges_matrix, aes(x=Level, y=Rating Ranges, fill=Count)) +
df_count <- df2 %>% count(Level, ranges)
level_ranges_wideFormat <- dcast(df_count, Level ~ ranges, value.var = 'n')
level_ranges_matrix <- as.matrix(level_ranges_wideFormat[,-1])
rownames(level_ranges_matrix) <- level_ranges_wideFormat$Level
level_ranges_matrix <- melt(level_ranges_matrix, varnames=c("Level","Ranges"), value.name = 'Count')
ggplot(level_ranges_matrix, aes(x=Level, y=Ranges, fill=Count)) +
geom_tile() +
scale_fill_gradient(low='lightblue', high='darkblue', na.value='white') +
labs(y='Rating Ranges', title='Distribution of Courses by Level and Rating Ranges')
ggplot(level_ranges_matrix, aes(x=Level, y=Ranges, fill=Count)) +
geom_tile() +
geom_test(aes(label=Count), color='black') +
scale_fill_gradient(low='lightblue', high='darkblue', na.value='white') +
labs(y='Rating Ranges', title='Distribution of Courses by Level and Rating Ranges')
ggplot(level_ranges_matrix, aes(x=Level, y=Ranges, fill=Count)) +
geom_tile() +
geom_text(aes(label=Count), color='black') +
scale_fill_gradient(low='lightblue', high='darkblue', na.value='white') +
labs(y='Rating Ranges', title='Distribution of Courses by Level and Rating Ranges')
ggplot(level_ranges_matrix, aes(x=Level, y=Ranges, fill=Count)) +
geom_tile() +
geom_text(aes(label=Count), color='black') +
scale_fill_gradient(low='lightblue', high='blue', na.value='white') +
labs(y='Rating Ranges', title='Distribution of Courses by Level and Rating Ranges')
# Set up -----------------------------------------------------------------------
sessionInfo()
library(tidyverse)
library(zoo)
library(textcat)
getwd()
list.files(getwd())
unclean_data <- read.csv("CourseraDataset-Unclean.csv")
summary(unclean_data)
colnames(unclean_data)
unclean_data <- rename(unclean_data, crs_title = "Course.Title")
unclean_data <- rename(unclean_data, will_learn = "What.you.will.learn")
unclean_data <- rename(unclean_data, offered = "Offered.By")
unclean_data <- rename(unclean_data, URL = "Course.Url")
unclean_data <- rename(unclean_data, skill = "Skill.gain")
colnames(unclean_data)
knitr::opts_chunk$set(echo = TRUE)
unclean_data <- read.csv("CourseraDataset-Unclean.csv")
# Clean NA ---------------------------------------------------------------------
sapply(unclean_data, typeof)
unclean_data <- read.csv("CourseraDataset-Unclean.csv")
unclean_data <- read.csv("CourseraDataset-Unclean.csv")
unclean_data <- read.csv("CourseraDataset-Unclean.csv")
summary(unclean_data)
colnames(unclean_data)
unclean_data <- read.csv("CourseraDataset-Unclean.csv")
library(tidyverse)
library(zoo)
library(textcat)
orig_df <- read.csv("CourseraDataset-Unclean.csv")
summary(orig_df)
colnames(orig_df)
colSums(is.na(orig_df))
orig_df <- rename(orig_df, crs_title = "Course.Title")
orig_df <- rename(orig_df, will_learn = "What.you.will.learn")
orig_df <- rename(orig_df, offered = "Offered.By")
orig_df <- rename(orig_df, URL = "Course.Url")
orig_df <- rename(orig_df, skill = "Skill.gain")
colnames(orig_df)
orig_df <- rename(orig_df, crs_title = "Course.Title")
orig_df <- read.csv("CourseraDataset-Unclean.csv")
summary(orig_df)
colnames(orig_df)
library(tidyverse)
library(zoo)
library(textcat)
orig_df <- rename(orig_df, crs_title = "Course.Title")
orig_df <- rename(orig_df, will_learn = "What.you.will.learn")
orig_df <- rename(orig_df, offered = "Offered.By")
orig_df <- rename(orig_df, URL = "Course.Url")
orig_df <- rename(orig_df, skill = "Skill.gain")
colnames(orig_df)
sapply(orig_df, typeof)
print("Columns' names:")
colnames(orig_df)
print("Data type of columns:")
sapply(orig_df, typeof)
cat("Columns' names:")
colnames(orig_df)
cat("Data type of columns:")
sapply(orig_df, typeof)
cat("Columns' names:")
cat(colnames(orig_df))
cat("Data type of columns:")
sapply(orig_df, typeof)
cat("Columns' names:")
cat(colnames(orig_df), ' \n')
cat("Data type of columns:")
sapply(orig_df, typeof)
cat("Columns' names:")
cat(colnames(orig_df), '\n')
cat("Data type of columns:")
sapply(orig_df, typeof)
cat("Columns' names:")
cat(colnames(orig_df), ',\n')
cat("Data type of columns:")
sapply(orig_df, typeof)
cat("Columns' names:")
cat(colnames(orig_df), ',\n')
cat("Data type of columns:")
sapply(orig_df, typeof)
cat("Columns' names:")
cat(colnames(orig_df))
cat("Data type of columns:")
sapply(orig_df, typeof)
orig_df <- rename(orig_df, crs_title = "Course.Title")
data_types <- sapply(orig_df, typeof)
data_types <- sapply(orig_df, typeof)
results <- paste(names(orig_df), ":", data_types, collapse = ", ")
cat(results,'\n')
data_types <- sapply(orig_df, typeof)
results <- paste(names(orig_df), ":", data_types, collapse = ", ")
cat(results,'\n')
```
head(orig_df)
clean_NA_func <- function(input_df, colname, replace_value) {
input_df <- input_df %>% mutate(
!!sym(colname) := ifelse(
is.na(!!sym(colname)), replace_value, !!sym(colname)
)
)
return(input_df)
}
orig_df <- clean_NA_func(orig_df, "Review", 0)
colSums(is.na(orig_df))
orig_df <- clean_NA_func(orig_df, "Rating", 0)
colSums(is.na(orig_df))
# Clean Duplication -----------------------------------------------------------
## Purpose: there are rows with same link but different keywords => append the keyword together
sum(duplicated(unclean_data$URL))
unclean_data
unclean_data <- read.csv("CourseraDataset-Unclean.csv")
df <- unclean_data
orig_df <- clean_NA_func(orig_df, "Rating", 0)
colSums(is.na(orig_df))
getwd()
install.packages("tidyverse")
install.packages("zoo")
install.packages("textcat")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(zoo)
library(textcat)
sessionInfo()
knitr::clean_cache()
knitr::clean_cache()
knitr::opts_chunk$set(echo = TRUE)
knitr::clean_cache()
knitr::opts_chunk$set(echo = TRUE)
knitr::clean_cache()
wt <- 150
ht <- 68
bmi <- (wt*703)/ht**2
diameter <- 12
cost <- 8
area <- pi * (diameter/2)**2
dim <- 15
cost2 <- 12
area2 <- pi * (dim/2)**2
cost/area
cost2/area2
(14 * 0.51)**(1/2)
(14 * 0.51)**(1/3)
n <- 1:5
(14*0.51)**(1/n)
kg <- c(69,62,57,59,59,64,56,66,67,66)
lbs <- kg * 2.20462
mean(lbs)
lbs
hts <- c(62,58,61,61,59,64,63,61,60,62)
bmi <- (lbs*703)/hts**2
mean(bmi)
seq1 <- seq(from=0, to=1, by=0.1)
seq2 <- seq(from=10, to=1, by=-0.5)
rep(1:3, times = 3)
rep(c("a", "c", "e", "g"), each = 3)
rep(c("a", "c", "e", "g"), times = 3)
rep(1:3, each = 3, times = 2)
rep(1:5, times = 5:1)
rep(c(7, 2, 8, 1), times = c(4, 3, 1, 5))
child_names <- c('John','Jack','Jane')
ht <- c(63,59,60)
height_ord <- order(ht, decreasing = TRUE)
names_sort <- child_names[height_ord]
names_sort
child_names2 <- c('Alfred','Barbara','James','Jane','John','Judy','Louise','Mary','Ronald','William')
ht2 <- c(62,58,61,61,59,64,63,61,60,62)
ht_ord <- order(ht2, decreasing = TRUE)
names_sort2 <- child_names2[ht_ord]
names_sort2
mydata <- c(2,4,1,6,8,5,NA,4,7)
mean(mydata)
mean(mydata, na.rm = TRUE)
