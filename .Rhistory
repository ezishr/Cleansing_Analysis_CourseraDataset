summary(unclean_data)
colnames(unclean_data)
clean_dup1 <- function(input_df, col_dup, col_append){
while( sum( duplicated(input_df[,col_dup] ) ) >= 1){
dup_df <- input_df[which( duplicated(input_df[,col_dup]) ),] # get df of duplicated rows of URL
link_1st_row <- as.character(dup_df[1, col_dup])
row_indices <- as.numeric(which( input_df[,col_dup] == link_1st_row )) # get rows having same links
row_indices_without_min <- row_indices[-which.min(row_indices)]
for (i in row_indices_without_min){
input_df[min(row_indices), col_append] <- paste(
input_df[min(row_indices), col_append], input_df[i, col_append], sep = ", "
)
input_df <- input_df[-i,]
}
}
return(input_df)
}
df <- unclean_data
sum(duplicated(df$URL))
df <- clean_dup1(df, "URL", "Keyword")
summary(df)
clean_dup1 <- function(input_df, col_dup, col_append){
while( sum( duplicated(input_df[,col_dup] ) ) >= 1){
dup_df <- input_df[which( duplicated(input_df[,col_dup]) ),] # get df of duplicated rows of URL
link_1st_row <- as.character(dup_df[1, col_dup])
row_indices <- as.numeric(which( input_df[,col_dup] == link_1st_row )) # get rows having same links
row_indices_without_min <- row_indices[-which.min(row_indices)]
for (i in row_indices_without_min){
input_df[min(row_indices), col_append] <- paste(
input_df[min(row_indices), col_append], input_df[i, col_append], sep = ", "
)
}
input_df <- input_df[-row_indices_without_min,]
}
return(input_df)
}
df <- unclean_data
sum(duplicated(df$URL))
df <- clean_dup1(df, "URL", "Keyword")
summary(df)
# finalize -----
unclean_data <- clean_dup1(unclean_data, "URL", "Keyword")
summary(unclean_data)
# Clean Social Sciences in Keyword col -----------------------------------------
summary(unclean_data)
df <- unclean_data %>% mutate(
count_SocialSciences = str_count(Keyword, fixed("Social Sciences"))
) %>% select(Keyword, count_SocialSciences)
unique(df$count_SocialSciences)
df[which(df$count_SocialSciences > 1),]
summary(unclean_data)
unique(df$count_SocialSciences)
df[which(df$count_SocialSciences > 1),]
df <- unclean_data %>% mutate(
count_SocialSciences = str_count(Keyword, fixed("Social Sciences"))
) %>% select(Keyword, count_SocialSciences)
colnames(df)
df <- df %>% ifelse( count_SocialSciences > 1, str_replace_all(Keyword, fixed("Social Sciences, Social Sciences"), "Social Sciences"), Keyword)
df <- ifelse( df$count_SocialSciences > 1, str_replace_all(df$Keyword, fixed("Social Sciences, Social Sciences"), "Social Sciences"), df$Keyword)
df
unique(df$count_SocialSciences)
summary(df)
df <- unclean_data %>% mutate(
count_SocialSciences = str_count(Keyword, fixed("Social Sciences"))
) %>% select(Keyword, count_SocialSciences)
unique(df$count_SocialSciences)
colnames(df)
df$Keyword <- ifelse( df$count_SocialSciences > 1, str_replace_all(df$Keyword, fixed("Social Sciences, Social Sciences"), "Social Sciences"), df$Keyword)
summary(df)
df <- unclean_data %>% mutate(
count_SocialSciences = str_count(Keyword, fixed("Social Sciences"))
) %>% select(Keyword, count_SocialSciences)
unique(df$count_SocialSciences)
df$Keyword <- ifelse( df$count_SocialSciences > 1, str_replace_all(df$Keyword, fixed("Social Sciences, Social Sciences"), "Social Sciences"), df$Keyword)
df <- df %>% mutate(
count_SocialSciences = str_count(Keyword, fixed("Social Sciences"))
)
unique(df$count_SocialSciences)
df <- unclean_data
df$Keyword <- ifelse(
str_count(df$Keyword, fixed("Social Sciences")) > 1, str_replace_all( df$Keyword, fixed("Social Sciences, Social Sciences"), "Social Sciences"), df$Keyword
)
df %>% mutate( count = str_count(Keyword, fixed("Social Sciences"))) %>% filter(count > 1)
unclean_data <- df
summary(unclean_data)
# Clean specific signs [,],' ---------------------------------------------------
summary(unclean_data)
unclean_data %>% head(10)
view( unclean_data %>% head(10) )
glimpse(unclean_data %>% head(10))
## finalize
df <- unclean_data %>% head(10) %>% select(crs_title, skill)
df
clean_sign1 <- function(input_df, column, sign1, sign2 = ""){
input_df[,column] <- sapply(
input_df[,column], function(x){
x <- gsub(paste(fixed(sign1), '|', fixed(sign2)), "", x) #syntax: gsub(pattern, replacement value, object/text)
}
)
}
df <- clean_sign1(df, "\\[", "\\]")
df <- clean_sign1(df, "\\[", "\\]")
df <- clean_sign1(df, "skill","\\[", "\\]")
view(df)
df
df
## finalize
df <- unclean_data %>% head(10) %>% select(crs_title, skill)
df
clean_sign1 <- function(input_df, column, sign1, sign2 = ""){
input_df[,column] <- sapply(
input_df[,column], function(x){
x <- gsub(paste0(fixed(sign1), '|', fixed(sign2)), "", x) #syntax: gsub(pattern, replacement value, object/text)
}
)
return(input_df)
}
df <- clean_sign1(df, "skill","\\[", "\\]")
df
df <- clean_sign1(df, "skill","'")
df
## finalize
df <- unclean_data %>% head(10) %>% select(crs_title, skill)
view(df)
df <- clean_sign1(df, "skill","'")
view(df)
df <- clean_sign1(df, "skill","\\[", "\\]")
view(df)
## finalize
unclean_data1 <- clean_sign1(unclean_data, "skill", "\\[", "\\]", "'")
clean_sign1 <- function(input_df, column, sign1, sign2 = "", sign3 = ""){
input_df[,column] <- sapply(
input_df[,column], function(x){
x <- gsub(paste0(fixed(sign1), "|", fixed(sign2), "|", fixed(sign3)), "", x) #syntax: gsub(pattern, replacement value, object/text)
}
)
return(input_df)
}
## finalize
unclean_data1 <- clean_sign1(unclean_data, "skill", "\\[", "\\]", "'")
view(unclean_data1)
unclean_data <- clean_sign1(unclean_data, "skill", "\\[", "\\]", "'")
view(unclean_data)
summary(unclean_data)
## finalize
unclean_data <- clean_sign1(unclean_data, "Modules", "\\[", "\\]", "'")
## finalize
unclean_data <- clean_sign1(unclean_data, "Instructor", "\\[", "\\]", "'")
## finalize
unclean_data <- clean_sign1(unclean_data, "offered", "\\[", "\\]", "'")
view(unclean_data)
summary(unclean_data)
## finalize
unclean_data <- clean_sign1(unclean_data, "offered", '"')
view(unclean_data)
## finalize
unclean_data <- clean_sign1(unclean_data, "offered", '"')
view(unclean_data)
summary(unclean_data)
## finalize
unclean_data <- clean_sign1(unclean_data, "Instructor", '"')
view(unclean_data)
unclean_data <- clean_empty1(unclean_data, "skill", "No information")
summary(unclean_data)
view(clean_data)
view(unclean_data)
# Clean Empty ---------------------------------------------------------------------
colSums(unclean_data == "")
unclean_data <- clean_empty1(unclean_data, "Level", "No information")
unclean_data <- clean_empty1(unclean_data, "Duration", "No information")
unclean_data <- clean_empty1(unclean_data, "Schedule", "No information")
unclean_data <- clean_empty1(unclean_data, "Review", "No information")
unclean_data <- clean_empty1(unclean_data, "Modules", "No information")
unclean_data <- clean_empty1(unclean_data, "Instructor", "No information")
summary(unclean_data)
view(unclean_data)
# Clean Empty ---------------------------------------------------------------------
colSums(unclean_data == "")
# Analysi Level vs. Rating -----------------------------------------------------
lvel_rating <- unclean_data %>% filter(Rating != "No information") %>% select(Level, Rating)
lvel_rating
lvel_rating$Rating <- as.double(lvel_rating$Rating)
ggplot(lvel_rating, aes(x = Level)) + geom_bar()
ggplot(lvel_rating, aes(x = Level)) + geom_bar(col = Rating)
ggplot(lvel_rating, aes(x = Level)) + geom_bar(col = lvel_rating$Rating)
ggplot(lvel_rating, aes(x = Rating)) + geom_bar(col = lvel_rating$Level)
ggplot(lvel_rating, aes(x = Rating)) + geom_bar()
# Clean Review -----------------------------------------------------------------
unclean_data$Review <- str_replace_all(unclean_data$Review, fixed("reviews"), "")
view(unclean_data$Review)
view(unclean_data)
# Clean Duration ---------------------------------------------------------------
duration_col <- unclean_data$Duration
duration_col
# Clean Duration ---------------------------------------------------------------
duration_col <- unclean_data %>% select(Duration, URL)
duration_col
view(duration_col)
unique(duration_col$Duration)
rows_approx <- duration_col %>% str_detect(Duration, fixed("pproxi"))
duration_col %>% str_detect(Duration, fixed("pproxi"))
duration_col %>% str_detect(duration_col$Duration, fixed("pproxi"))
str_detect(duration_col$Duration, fixed("pproxi"))
duration_col[,str_detect(duration_col$Duration, fixed("pproxi"))]
which(str_detect(duration_col$Duration, fixed("pproxi")))
duration_col[which(str_detect(duration_col$Duration, fixed("pproxi"))),]
rows_approx <- duration_col[which(str_detect(duration_col$Duration, fixed("pproxi"))),]
summary(rows_approx)
summary(duration_col)
str_replace_all(rows_approx$Duration, "[A-Za-z]", "")
rows_approx1 <- rows_approx
rows_approx1$Duration <- str_replace_all(rows_approx$Duration, "[A-Za-z]", "")
view(rows_approx1)
x <- "gwrg 5315"
x <- str_replace(x, "[A-Za-z]", "")
x
x <- str_replace_all(x, "[A-Za-z]", "")
x
str_remove(x, "")
y <- str_remove(x, " ")
y
x <- "gwrg 5315"
x <- str_remove(x, "[A-Za-z ]")
x
x <- str_remove_all(x, "[A-Za-z ]")
x
rows_approx1$Duration <- str_remove_all(rows_approx$Duration, "[A-Za-z] ")
view(rows_approx1)
rows_approx1$Duration <- str_remove_all(rows_approx1$Duration, "[A-Za-z ]")
view(rows_approx1)
rows_approx1 <- rows_approx
rows_approx1$Duration <- str_remove_all(rows_approx1$Duration, "[A-Za-z() ]")
view(rows_approx1)
uique(rows_approx$Duration)
unique(rows_approx$Duration)
str_detect(rows_approx$Duration, fixed("minute"))
str_view(str_detect(rows_approx$Duration, fixed("minute")))
str_subset(rows_approx$Duration, fixed("minute"))
str_subset(rows_approx$Duration, fixed("second"))
summary(rows_approx)
str_count(rows_approx$Duration, fixed("hour"))
str_sub(rows_approx$Duration, fixed("hour"))
sum(str_subset(rows_approx$Duration, fixed("second")))
sum(str_subset(rows_approx$Duration, fixed("hour")))
sum(str_detect(rows_approx$Duration, fixed("hour")))
unique(unclean_data$Duration)
sessionInfo()
library(tidyverse)
library(zoo)
install.packages("textcat")
library(textcat)
getwd()
list.files(getwd())
unclean_data <- read.csv("CourseraDataset-Unclean.csv")
summary(unclean_data)
colnames(unclean_data)
unclean_data <- rename(unclean_data, crs_title = "Course.Title")
unclean_data <- rename(unclean_data, will_learn = "What.you.will.learn")
unclean_data <- rename(unclean_data, offered = "Offered.By")
unclean_data <- rename(unclean_data, URL = "Course.Url")
unclean_data <- rename(unclean_data, skill = "Skill.gain")
colnames(unclean_data)
summary(unclean_data)
# Set up -----------------------------------------------------------------------
sessionInfo()
library(tidyverse)
library(zoo)
install.packages("textcat")
library(textcat)
getwd()
list.files(getwd())
unclean_data <- read.csv("CourseraDataset-Unclean.csv")
summary(unclean_data)
colnames(unclean_data)
# Set columns name -------------------------------------------------------------
unclean_data <- rename(unclean_data, crs_title = "Course.Title")
unclean_data <- rename(unclean_data, will_learn = "What.you.will.learn")
unclean_data <- rename(unclean_data, offered = "Offered.By")
unclean_data <- rename(unclean_data, URL = "Course.Url")
unclean_data <- rename(unclean_data, skill = "Skill.gain")
colnames(unclean_data)
summary(unclean_data)
# Clean NA ---------------------------------------------------------------------
sapply(unclean_data, typeof)
unclean_data$Rating <- as.character(unclean_data$Rating)
# clean_NA1 <- function(df, col_clean){
#  extract_col <- df %>% select(!!sym(col_clean))
#  df[, col_clean] <- ifelse(is.na(extract_col),"No information", extract_col)
#  return(df)} ------ Fail
clean_NA1 <- function(input_df, colname, replace_value){
input_df <- input_df %>% mutate(
!!sym(colname) := ifelse(
is.na(!!sym(colname)), replace_value, !!sym(colname)
)
)
return(input_df)
}
colSums(is.na(unclean_data))
df <- unclean_data
df <- clean_NA1(df, "Rating", "No information")
colSums(is.na(df))
unique(df$Rating)
unclean_data <- clean_NA1(unclean_data, "Rating", "No information")
colSums(is.na(unclean_data))
summary(unclean_data)
# Clean Empty ---------------------------------------------------------------------
colSums(unclean_data == "")
clean_empty1 <- function(input_df, colname, replace_value){
input_df <- input_df %>% mutate(
!!sym(colname) := ifelse(
!!sym(colname) == "", replace_value, !!sym(colname)
)
)
}
df <- unclean_data
df <- clean_empty1(df, "Level", "No information")
summary(df)
unclean_data <- clean_empty1(unclean_data, "Instructor", "No information")
summary(unclean_data)
view(unclean_data)
# Clean Duplications -----------------------------------------------------------
## Purpose: there are rows with same link but different keywords => append the keyword together
sum(duplicated(unclean_data$URL))
clean_dup1 <- function(input_df, col_dup, col_append){
while( sum( duplicated(input_df[,col_dup] ) ) >= 1){
dup_df <- input_df[which( duplicated(input_df[,col_dup]) ),] # get df of duplicated rows of URL
link_1st_row <- as.character(dup_df[1, col_dup])
row_indices <- as.numeric(which( input_df[,col_dup] == link_1st_row )) # get rows having same links
row_indices_without_min <- row_indices[-which.min(row_indices)]
for (i in row_indices_without_min){
input_df[min(row_indices), col_append] <- paste(
input_df[min(row_indices), col_append], input_df[i, col_append], sep = ", "
)
}
input_df <- input_df[-row_indices_without_min,]
}
return(input_df)
}
## testing
df <- unclean_data
sum(duplicated(df$URL))
df <- clean_dup1(df, "URL", "Keyword")
summary(df)
unique(df$Keyword)
## finalize
unclean_data <- clean_dup1(unclean_data, "URL", "Keyword")
summary(unclean_data)
# Clean Social Sciences in Keyword col -----------------------------------------
summary(unclean_data)
df <- df %>% mutate(
count_SocialSciences = str_count(Keyword, fixed("Social Sciences"))
)
unique(df$count_SocialSciences)
colnames(df)
df$Keyword <- ifelse( df$count_SocialSciences > 1, str_replace_all(df$Keyword, fixed("Social Sciences, Social Sciences"), "Social Sciences"), df$Keyword)
summary(df)
df <- unclean_data
df$Keyword <- ifelse(
str_count(df$Keyword, fixed("Social Sciences")) > 1, str_replace_all( df$Keyword, fixed("Social Sciences, Social Sciences"), "Social Sciences"), df$Keyword
)
unclean_data <- df
summary(unclean_data)
# Clean specific signs [,],' ---------------------------------------------------
summary(unclean_data)
unclean_data %>% mutate(count =
str_count())
clean_sign1 <- function(input_df, column, sign1, sign2 = "", sign3 = ""){
input_df[,column] <- sapply(
input_df[,column], function(x){
x <- gsub(paste0(fixed(sign1), "|", fixed(sign2), "|", fixed(sign3)), "", x) #syntax: gsub(pattern, replacement value, object/text)
}
)
return(input_df)
}
df <- clean_sign1(df, "skill","\\[", "\\]")
view(df)
unclean_data <- clean_sign1(unclean_data, "Instructor", '"')
view(unclean_data)
summary(unclean_data)
## finalize
unclean_data <- clean_sign1(unclean_data, "Instructor", "'","\\[","\\]")
view(unclean_data)
unclean_data <- clean_sign1(unclean_data, "Modules", "'","\\[","\\]")
unclean_data <- clean_sign1(unclean_data, "skill", "'","\\[","\\]")
view(unclean_data)
unclean_data <- clean_sign1(unclean_data, "offered", "'","\\[","\\]")
view(unclean_data)
summary(unclean_data)
unclean_data$Review <- str_replace_all(unclean_data$Review, fixed("reviews"), "")
view(unclean_data$Review)
view(unclean_data)
summary(unclean_data)
unclean_data$Review <- as.double(unclean_data$Review)
summary(unclean_data)
unclean_data$Review <- as.character(unclean_data$Review)
summary(unclean_data)
# Clean Duration ---------------------------------------------------------------
duration_col <- unclean_data %>% select(Duration, URL)
view(duration_col)
unique(duration_col$Duration)
rows_approx <- duration_col[which(str_detect(duration_col$Duration, fixed("pproxi"))),]
summary(rows_approx)
summary(duration_col)
rows_approx1 <- rows_approx
rows_approx1$Duration <- str_remove_all(rows_approx1$Duration, "[A-Za-z() ]")
view(rows_approx1)
view(rows_approx)
rows_approx1 <- rows_approx
rows_approx <- duration_col[which(str_detect(duration_col$Duration, "pproximate")),]
summary(rows_approx)
view(rows_approx)
rows_approx <- duration_col[which(str_detect(duration_col$Duration, "pprox")),]
summary(rows_approx)
view(rows_approx)
rows_approx1 <- rows_approx
view(rows_approx1)
str_detect(rows_appox1$Duration, "min", ignore.case = TURE)
str_detect(rows_appox1$Duration, "min", ignore.case = TRUE)
rows_approx1 <- rows_approx
str_detect(rows_appox1$Duration, "min", ignore.case = TRUE)
str_detect(rows_appox1$Duration, "min", ignore_case = TRUE)
?str_detect
str_detect(rows_appox1$Duration, "min")
str_detect(rows_approx1$Duration, "min")
rows_approx1[which(str_detect(rows_approx1$Duration, "min")),Duration]
rows_approx1[which(str_detect(rows_approx1$Duration, "min")),Duration]
rows_approx1[Duration, which(str_detect(rows_approx1$Duration, "min"))]
rows_approx1["Duration", which(str_detect(rows_approx1$Duration, "min"))]
rows_approx1[which(str_detect(rows_approx1$Duration, "min")),"Duration"]
rows_approx1[1,"Duration"]
rows_approx1[which(str_detect(rows_approx1$Duration, "min")),"Duration"]
rows_approx1 %>% str_detect(Duration, "min")
rows_approx1 %>% str_detect("Duration", "min")
view(rows_approx1)
unique(rows_approx1$Duration)
rows_with_min <- unique(rows_approx1$Duration)
str_detect(rows_with_min$"Duration", "min")
str_detect(rows_with_min, "min")
str_detect(rows_with_min, "our")
sum(str_detect(rows_with_min, "min"))
sum(str_detect(rows_with_min, "our"))
summary(rows_approx1)
str_remove_all(rows_approx1$Duration, paste0("hour", "|", "approximate", "|", "Approximate"))
rows_approx1 <- rows_approx
?ncar
?ncar
?ncar()
?nchar
which.max(nchar(rows_approx1$Duration))
rows_approx1[2809,Duration]
rows_approx1[2809,"Duration"]
rows_approx <- duration_col[which(str_detect(duration_col$Duration, "pprox")),]
summary(rows_approx)
view(rows_approx)
summary(unclean_data)
view(unclean_data)
rows_approx <- duration_col[which(str_detect(duration_col$Duration, "pprox")),]
summary(rows_approx)
view(rows_approx)
rows_approx1 <- rows_approx
summary(rows_approx1)
unique_duration_values <- unique(rows_approx1$Duration)
sum(str_detect(unique_duration_values, "our")) #check if there is row having hour or minutes. result: all have hour
summary(unique_duration_values)
sum(str_detect(unique_duration_values, "our")) #check if there is row having hour or minutes. result: all have hour
unique_duration_values[which.max(nchar(unique_duration_values))]
rows_approx1[which.max(nchar(rows_approx1$Duration)),]
which.max(nchar(rows_approx1$Duration))
rows_approx1[which.max(nchar(rows_approx1$Duration)),"Duration"] <- "2"
rows_approx1[2809,"Duration"]
rows_approx1[2890,]
?grepl
# Use \\d to check if there is row with only letters
only_letters_cell <- apply(rows_approx1, 1, function(row) !any(grepl("\\d", row), na.rm = TRUE))
only_letters_cell
sum(only_letters_cell)
test_remove_letter_1 <- str_remove_all(rows_approx1$Duration, "[A-Za-z]")
view(test_remove_letter_1)
test_remove_letter_1 <- str_remove_all(rows_approx1$Duration, "[A-Za-z.() ]")
view(test_remove_letter_1)
summary(test_remove_letter_1
)
unique(test_remove_letter_1)
rows_approx1$Duration <- str_remove_all(rows_approx1$Duration, "[A-Za-z.() ]")
view(rows_approx1)
unclean_data[which(str_detect(duration_col$Duration, "pprox")),"Duration"] <- rows_approx1$Duration #Paste the clean duration into original df
unique(unclean_data$Duration)
# CLEAN MONTHS & WEEKS
month_week_rows <- unclean_data[which(str_detect(unclean_data$Duration, "month|week"))]
# CLEAN MONTHS & WEEKS
month_week_rows <- unclean_data[which(str_detect(unclean_data$Duration, "month|week")),]
view(month_week_rows)
sum(any(grepl("month|week", unclean_data$Duration, ignore.case = TRUE), na.rm = TRUE))
second_row <- subset(unclean_data, str_detect(unclean_data$Duration, "month|week"))
summary(second_row)
summary(month_week_rows)
third_row <- apply(unclean_data$Duration,1,function(row) any(grepl("month|week",row, ignore.case = TRUE), na.rm = TRUE))
third_row <- apply(unclean_data,1,function(row) any(grepl("month|week",row, ignore.case = TRUE), na.rm = TRUE))
summary(third_row)
third_row <- apply(unclean_data["Duration"],1,function(row) any(grepl("month|week",row, ignore.case = TRUE), na.rm = TRUE))
summary(third_row)
first_attempt <- unclean_data[which(str_detect(unclean_data$Duration, "month|week")),]
summary(first_attempt)
second_attempt <- subset(unclean_data, str_detect(unclean_data$Duration, "month|week"))
summary(second_attempt)
third_attempt <- apply(unclean_data["Duration"],1,function(row) any(grepl("month|week",row, ignore.case = TRUE), na.rm = TRUE))
summary(third_attempt)
month_week_duration <- unclean_data[which(str_detect(unclean_data$Duration, "month|week")), "Duration"]
view(month_week_duration)
view(unclean_data)
unique(month_week_duration)
rm(month_week_rows)
