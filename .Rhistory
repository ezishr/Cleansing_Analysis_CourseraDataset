)
}
input_df <- input_df[-row_indices_without_min, ]
}
return(input_df)
}
orig_df <- clean_dup_func(orig_df, "URL", "Keyword")
summary(orig_df)
orig_df$Keyword <- ifelse(
str_count(orig_df$Keyword, fixed("Social Sciences")) > 1, str_replace_all(
orig_df$Keyword, fixed("Social Sciences, Social Sciences"), "Social Sciences"
), orig_df$Keyword
)
unique(
(orig_df %>% mutate(
count_ss = str_count(orig_df$Keyword, fixed("Social Sciences"))
)
)$count_ss
)
head(orig_df)
clean_sign_func <- function(input_df, colname, sign1, sign2 = "", sign3 = "") {
input_df[, colname] <- sapply(input_df[, colname], function(x) {
x <- gsub(paste0(fixed(sign1), "|", fixed(sign2), "|", fixed(sign3)), "", x)
})
return(input_df)
}
# Apply function
orig_df <- clean_sign_func(orig_df, "skill", "\\[", "\\]", "'")
orig_df <- clean_sign_func(orig_df, "Modules", "\\[", "\\]", "'")
orig_df <- clean_sign_func(orig_df, "Instructor", "\\[", "\\]", "'")
orig_df <- clean_sign_func(orig_df, "offered", "\\[", "\\]", "'")
orig_df %>% head(20) %>% select(Duration)
unique(orig_df$Duration)
knitr::opts_chunk$set(echo = TRUE)
knitr::clean_cache()
orig_df <- read.csv("CourseraDataset-Unclean.csv")
summary(orig_df)
colnames(orig_df)
library(tidyverse)
library(zoo)
library(textcat)
sessionInfo()
orig_df <- rename(orig_df, crs_title = "Course.Title")
orig_df <- rename(orig_df, will_learn = "What.you.will.learn")
orig_df <- rename(orig_df, offered = "Offered.By")
orig_df <- rename(orig_df, URL = "Course.Url")
orig_df <- rename(orig_df, skill = "Skill.gain")
data_types <- sapply(orig_df, typeof)
results <- paste(names(orig_df), ":", data_types, collapse = ", ")
cat(results,'\n')
head(orig_df)
colSums(is.na(orig_df))
clean_NA_func <- function(input_df, colname, replace_value) {
input_df <- input_df %>% mutate(
!!sym(colname) := ifelse(
is.na(!!sym(colname)), replace_value, !!sym(colname)
)
)
return(input_df)
}
orig_df <- clean_NA_func(orig_df, "Rating", 0)
colSums(is.na(orig_df))
colSums(orig_df == "")
clean_empty_func <- function(input_df, colname, replace_value) {
input_df <- input_df %>% mutate(
!!sym(colname) := ifelse(
!!sym(colname) == "", replace_value, !!sym(colname)
)
)
}
columns_to_clean = c('Level','Duration','Schedule','will_learn','skill','Modules','Instructor')
for (col in columns_to_clean) {
orig_df <- clean_empty_func(orig_df, col, 'No information')
}
colSums(orig_df=="")
orig_df$Review <- str_replace_all(orig_df$Review, fixed(" reviews"), "")
orig_df <- clean_empty_func(orig_df, 'Review', '0')
orig_df$Review <- as.double(orig_df$Review)
sum(duplicated(orig_df$URL))
clean_dup_func <- function(input_df, col_dup, col_append) {
while (sum(duplicated(input_df[, col_dup])) >= 1) {
dup_df <- input_df[which(duplicated(input_df[, col_dup])), ] # get df of duplicated rows of URL
link_1st_row <- as.character(dup_df[1, col_dup])
row_indices <- as.numeric(which(input_df[, col_dup] == link_1st_row)) # get rows having same links
row_indices_without_min <- row_indices[-which.min(row_indices)]
for (i in row_indices_without_min) {
input_df[min(row_indices), col_append] <- paste(
input_df[min(row_indices), col_append], input_df[i, col_append],
sep = ", "
)
}
input_df <- input_df[-row_indices_without_min, ]
}
return(input_df)
}
orig_df <- clean_dup_func(orig_df, "URL", "Keyword")
summary(orig_df)
orig_df$Keyword <- ifelse(
str_count(orig_df$Keyword, fixed("Social Sciences")) > 1, str_replace_all(
orig_df$Keyword, fixed("Social Sciences, Social Sciences"), "Social Sciences"
), orig_df$Keyword
)
unique(
(orig_df %>% mutate(
count_ss = str_count(orig_df$Keyword, fixed("Social Sciences"))
)
)$count_ss
)
head(orig_df)
clean_sign_func <- function(input_df, colname, sign1, sign2 = "", sign3 = "") {
input_df[, colname] <- sapply(input_df[, colname], function(x) {
x <- gsub(paste0(fixed(sign1), "|", fixed(sign2), "|", fixed(sign3)), "", x)
})
return(input_df)
}
# Apply function
orig_df <- clean_sign_func(orig_df, "skill", "\\[", "\\]", "'")
orig_df <- clean_sign_func(orig_df, "Modules", "\\[", "\\]", "'")
orig_df <- clean_sign_func(orig_df, "Instructor", "\\[", "\\]", "'")
orig_df <- clean_sign_func(orig_df, "offered", "\\[", "\\]", "'")
orig_df %>% head(20) %>% select(Duration)
unique(orig_df$Duration)
knitr::opts_chunk$set(echo = TRUE)
knitr::clean_cache()
orig_df <- read.csv("CourseraDataset-Unclean.csv")
summary(orig_df)
colnames(orig_df)
library(tidyverse)
library(zoo)
library(textcat)
sessionInfo()
orig_df <- rename(orig_df, crs_title = "Course.Title")
orig_df <- rename(orig_df, will_learn = "What.you.will.learn")
orig_df <- rename(orig_df, offered = "Offered.By")
orig_df <- rename(orig_df, URL = "Course.Url")
orig_df <- rename(orig_df, skill = "Skill.gain")
data_types <- sapply(orig_df, typeof)
results <- paste(names(orig_df), ":", data_types, collapse = ", ")
cat(results,'\n')
head(orig_df)
colSums(is.na(orig_df))
clean_NA_func <- function(input_df, colname, replace_value) {
input_df <- input_df %>% mutate(
!!sym(colname) := ifelse(
is.na(!!sym(colname)), replace_value, !!sym(colname)
)
)
return(input_df)
}
orig_df <- clean_NA_func(orig_df, "Rating", 0)
colSums(is.na(orig_df))
colSums(orig_df == "")
clean_empty_func <- function(input_df, colname, replace_value) {
input_df <- input_df %>% mutate(
!!sym(colname) := ifelse(
!!sym(colname) == "", replace_value, !!sym(colname)
)
)
}
columns_to_clean = c('Level','Duration','Schedule','will_learn','skill','Modules','Instructor')
for (col in columns_to_clean) {
orig_df <- clean_empty_func(orig_df, col, 'No information')
}
colSums(orig_df=="")
orig_df$Review <- str_replace_all(orig_df$Review, fixed(" reviews"), "")
orig_df <- clean_empty_func(orig_df, 'Review', '0')
orig_df$Review <- as.double(orig_df$Review)
sum(duplicated(orig_df$URL))
clean_dup_func <- function(input_df, col_dup, col_append) {
while (sum(duplicated(input_df[, col_dup])) >= 1) {
dup_df <- input_df[which(duplicated(input_df[, col_dup])), ] # get df of duplicated rows of URL
link_1st_row <- as.character(dup_df[1, col_dup])
row_indices <- as.numeric(which(input_df[, col_dup] == link_1st_row)) # get rows having same links
row_indices_without_min <- row_indices[-which.min(row_indices)]
for (i in row_indices_without_min) {
input_df[min(row_indices), col_append] <- paste(
input_df[min(row_indices), col_append], input_df[i, col_append],
sep = ", "
)
}
input_df <- input_df[-row_indices_without_min, ]
}
return(input_df)
}
orig_df <- clean_dup_func(orig_df, "URL", "Keyword")
summary(orig_df)
orig_df$Keyword <- ifelse(
str_count(orig_df$Keyword, fixed("Social Sciences")) > 1, str_replace_all(
orig_df$Keyword, fixed("Social Sciences, Social Sciences"), "Social Sciences"
), orig_df$Keyword
)
unique(
(orig_df %>% mutate(
count_ss = str_count(orig_df$Keyword, fixed("Social Sciences"))
)
)$count_ss
)
head(orig_df)
clean_sign_func <- function(input_df, colname, sign1, sign2 = "", sign3 = "") {
input_df[, colname] <- sapply(input_df[, colname], function(x) {
x <- gsub(paste0(fixed(sign1), "|", fixed(sign2), "|", fixed(sign3)), "", x)
})
return(input_df)
}
# Apply function
orig_df <- clean_sign_func(orig_df, "skill", "\\[", "\\]", "'")
orig_df <- clean_sign_func(orig_df, "Modules", "\\[", "\\]", "'")
orig_df <- clean_sign_func(orig_df, "Instructor", "\\[", "\\]", "'")
orig_df <- clean_sign_func(orig_df, "offered", "\\[", "\\]", "'")
orig_df %>% head(20) %>% select(Duration)
unique(orig_df$Duration)
approx_rows <- df[which(str_detect(df$Duration, "pprox")), c("Duration", "URL")]
approx_rows <- orig_df[which(str_detect(df$Duration, "pprox")), c("Duration", "URL")]
approx_rows <- orig_df[which(str_detect(orig_df$Duration, "pprox")), c("Duration", "URL")]
approx_rows[which.max(nchar(approx_rows$Duration)), "Duration"] <- "2 hours"
view(approx_rows)
unique(approx_rows$Duration)
# FINALIZE CLEANSING UNTIL THIS STEP -------------------------------------------
orig_df <- read.csv("CourseraDataset-Unclean.csv")
## Set columns name
orig_df <- rename(orig_df, crs_title = "Course.Title")
orig_df <- rename(orig_df, will_learn = "What.you.will.learn")
orig_df <- rename(orig_df, offered = "Offered.By")
orig_df <- rename(orig_df, URL = "Course.Url")
orig_df <- rename(orig_df, skill = "Skill.gain")
colnames(orig_df)
## Clean NA for Rating col
clean_NA_func <- function(input_df, colname, replace_value) {
input_df <- input_df %>% mutate(
!!sym(colname) := ifelse(
is.na(!!sym(colname)), replace_value, !!sym(colname)
)
)
return(input_df)
}
colSums(is.na(orig_df))
orig_df <- clean_NA_func(orig_df, "Rating", "No information")
orig_df <- clean_NA_func(orig_df, "Review", 0)
view(orig_df)
## Clean Empty for Level col
colSums(orig_df == "")
clean_empty_func <- function(input_df, colname, replace_value) {
input_df <- input_df %>% mutate(
!!sym(colname) := ifelse(
!!sym(colname) == "", replace_value, !!sym(colname)
)
)
}
orig_df <- clean_empty_func(orig_df, "Level", "No information")
orig_df <- clean_empty_func(orig_df, "Review", 0)
orig_df <- clean_empty_func(orig_df, "Duration", "No information")
orig_df <- clean_empty_func(orig_df, "Schedule", "No information")
orig_df <- clean_empty_func(orig_df, "will_learn", "No information")
orig_df <- clean_empty_func(orig_df, "skill", "No information")
orig_df <- clean_empty_func(orig_df, "Modules", "No information")
orig_df <- clean_empty_func(orig_df, "Instructor", "No information")
## Clean duplicated URL
### Purpose: there are rows with same link but different keywords => append the keyword together
clean_dup_func <- function(input_df, col_dup, col_append) {
while (sum(duplicated(input_df[, col_dup])) >= 1) {
dup_df <- input_df[which(duplicated(input_df[, col_dup])), ] # get df of duplicated rows of URL
link_1st_row <- as.character(dup_df[1, col_dup])
row_indices <- as.numeric(which(input_df[, col_dup] == link_1st_row)) # get rows having same links
row_indices_without_min <- row_indices[-which.min(row_indices)]
for (i in row_indices_without_min) {
input_df[min(row_indices), col_append] <- paste(
input_df[min(row_indices), col_append], input_df[i, col_append],
sep = ", "
)
}
input_df <- input_df[-row_indices_without_min, ]
}
return(input_df)
}
orig_df <- clean_dup_func(orig_df, "URL", "Keyword")
summary(orig_df)
## Clean "Social Sciences" duplication in Keyword col
orig_df$Keyword <- ifelse(
str_count(orig_df$Keyword, fixed("Social Sciences")) > 1, str_replace_all(
orig_df$Keyword, fixed("Social Sciences, Social Sciences"), "Social Sciences"
), orig_df$Keyword
)
unique(
(orig_df %>% mutate(
count_ss = str_count(orig_df$Keyword, fixed("Social Sciences"))
)
)$count_ss
) ### check
## Clean specific signs [,],'
clean_sign_func <- function(input_df, colname, sign1, sign2 = "", sign3 = "") {
input_df[, colname] <- sapply(input_df[, colname], function(x) {
x <- gsub(paste0(fixed(sign1), "|", fixed(sign2), "|", fixed(sign3)), "", x)
})
return(input_df)
}
orig_df <- clean_sign_func(orig_df, "skill", "\\[", "\\]", "'")
orig_df <- clean_sign_func(orig_df, "Modules", "\\[", "\\]", "'")
orig_df <- clean_sign_func(orig_df, "Instructor", "\\[", "\\]", "'")
orig_df <- clean_sign_func(orig_df, "offered", "\\[", "\\]", "'")
## Clean word "reviews" in Review col
colnames(orig_df)
orig_df$Review <- str_replace_all(orig_df$Review, fixed(" reviews"), "")
## Clean NA and empty in Review col
orig_df <- clean_NA_func(orig_df, colname = "Review", replace_value = "0")
## Change type of Review col
orig_df$Review <- as.double(orig_df$Review)
summary(orig_df)
# CLEAN DURATION ---------------------------------------------------------------
## Get a copy version to testing
df <- orig_df
## Get rows having approx words
approx_rows <- df[which(str_detect(df$Duration, "pprox")), c("Duration", "URL")]
view(approx_rows)
unique(approx_rows$Duration)
## Change the longest row to n
approx_rows[which.max(nchar(approx_rows$Duration)), "Duration"] <- "2 hours"
## Delete all letter chars in Duration and add word "hours"
approx_rows[, "Duration"] <- gsub("[^0-9]", "", approx_rows[, "Duration"])
approx_rows[, "Duration"] <- paste0(approx_rows[, "Duration"], " hours")
## Add new column named category
approx_rows <- approx_rows %>% mutate(
category = "Approximately"
)
## Apply above changes to original df
matches <- grepl("pprox", df$Duration)
df[matches, "Duration"] <- approx_rows$Duration
df <- left_join(df, approx_rows[, c("category", "URL")], by = "URL")
df <- df[order(df$Duration), ]
view(df)
unique(df$Duration)
df[which(df$Duration == "one hour"), "Duration"] <- "1 hour"
unique(df$Duration)
# NEED FIX FROM HERE Aug 29th ------------------------------------------------------
for (col_name in colnames(df)){
df[[col_name]] <- trimws(df[[col_name]])
}
unique(df$Duration)
# NEED FIX FROM HERE Aug 29th ------------------------------------------------------
for (col_name in colnames(df)){
df[[col_name]] <- trimws(df[[col_name]])
}
unique(df$Duration)
df[df$Duration=='1 hours', Duration] <- '1 hour'
df[df$Duration=='1 hours', 'Duration'] <- '1 hour'
unique(df$Duration)
object <- '8 months at 10 hours a week'
regex_month <- '(?<=\\b+)\\d+(\\.\\d+)?(?=\\s+\\months?\\b)'
month <- str_extract(object, regex_month)
month <- str_extract(object, pattern = regex_month)
regex_month <- '(?<=\\b+)\\d+(\\.\\d+)?(?=\\s+\\months?\\b+)'
month <- str_extract(object, pattern = regex_month)
regex_month <- '(?<=\b+)\d+(\.\d+)?(?=\s+\months?\b)'
month <- str_extract(object, pattern = regex_month)
regex_month <- '(?<=\\b)\\d+(\\.\\d+)?(?=\\s+months?\\b)'
month <- str_extract(object, pattern = regex_month)
regex_hour <- '(?<=\\b)\\d+(\\.\\d+)?(?=\\s+hours?\\b)'
hour <- str_extract(object, pattern = regex_hour)
## Get rows having following words: month, week, at-----------------------------
month_df <- df[which(str_detect(df$Duration, paste0(fixed("month"), "|", fixed("week"), "|", fixed(" at ")))), c("Duration", "URL", "category")]
month_df
unique(month_df$Duration)
month_df[which(month_df$Duration == "1 week of study, 2 hours"), "category"] <- "Hours"
month_df[which(month_df$Duration == "1 week of study, 2 hours"), "Duration"] <- "14 hours"
unique(month_df$Duration)
object <- '14 hours'
month <- str_extract(object, pattern = regex_month)
hour <- str_extract(object, pattern = regex_hour)
total_duration <- function(value){
if(value != 'No information'){
hours <- as.numeric((
str_extract(value, "(?<=\\b)\\d+(\\.\\d+)?(?=\\s+hours?\\b)")
))
# (?<=...) matches lookbehind and \\b is a boundary of a word. then \\d+ matches one or more digits. (\\.\\d+) matches dot and the following number and this is ? to see if there is that decimal or not.
# (?=\\s+hours?\\b) matches lookahead, \\s+ matches whitespace or tab, following by hour or hours with ? after s, and finally make sure it is followed by \\b a word boundary
minutes <- as.numeric((
str_extract(value, "(?<=\\b)\\d+(\\.\\d+)?(?=\\s+minutes?\\b)")
))
months <- as.numeric((
str_extract(value, "(?<=\\b)\\d+(\\.\\d+)?(?=\\s+months?\\b)")
))
hours <- ifelse(is.na(hours),0,hours)
minutes <- ifelse(is.na(minutes),0,minutes)
months <- ifelse(is.na(months),0,months)
total_hours <- hours + minutes/60 + months*720
} else {return(0)}
return(round(total_hours,2))
}
month_df <- month_df %>% mutate(
hours_spent = sapply(Duration,total_duration)
)
unique(month_df)
if(value != 'No information'){
hours <- as.numeric((
str_extract(value, "(?<=\\b)\\d+(\\.\\d+)?(?=\\s+hours?\\b)")
))
minutes <- as.numeric((
str_extract(value, "(?<=\\b)\\d+(\\.\\d+)?(?=\\s+minutes?\\b)")
))
months <- as.numeric((
str_extract(value, "(?<=\\b)\\d+(\\.\\d+)?(?=\\s+months?\\b)")
))
hours <- ifelse(is.na(hours),0,hours)
minutes <- ifelse(is.na(minutes),0,minutes)
months <- ifelse(is.na(months),0,months)
if (month == NA){
return(hours)
}
else {
total_hours <- hours*month*4
}
return(round(total_hours,2))
}
if(value != 'No information'){
hours <- as.numeric((
str_extract(value, "(?<=\\b)\\d+(\\.\\d+)?(?=\\s+hours?\\b)")
))
minutes <- as.numeric((
str_extract(value, "(?<=\\b)\\d+(\\.\\d+)?(?=\\s+minutes?\\b)")
))
months <- as.numeric((
str_extract(value, "(?<=\\b)\\d+(\\.\\d+)?(?=\\s+months?\\b)")
))
hours <- ifelse(is.na(hours),0,hours)
minutes <- ifelse(is.na(minutes),0,minutes)
months <- ifelse(is.na(months),0,months)
if (is.na(month)){
return(hours)
}
else {
total_hours <- hours*month*4
}
return(round(total_hours,2))
}
minutes <- as.numeric((
str_extract(value, "(?<=\\b)\\d+(\\.\\d+)?(?=\\s+minutes?\\b)")
))
## Get rows having following words: month, week, at-----------------------------
month_df <- df[which(str_detect(df$Duration, paste0(fixed("month"), "|", fixed("week"), "|", fixed(" at ")))), c("Duration", "URL", "category")]
month_df[which(month_df$Duration == "1 week of study, 2 hours"), "category"] <- "Hours"
month_df[which(month_df$Duration == "1 week of study, 2 hours"), "Duration"] <- "14 hours"
months <- as.numeric((
str_extract(value, "(?<=\\b)\\d+(\\.\\d+)?(?=\\s+months?\\b)")
))
sample_func <- function(value) {
if(value != 'No information'){
hours <- as.numeric((
str_extract(value, "(?<=\\b)\\d+(\\.\\d+)?(?=\\s+hours?\\b)")
))
minutes <- as.numeric((
str_extract(value, "(?<=\\b)\\d+(\\.\\d+)?(?=\\s+minutes?\\b)")
))
months <- as.numeric((
str_extract(value, "(?<=\\b)\\d+(\\.\\d+)?(?=\\s+months?\\b)")
))
hours <- ifelse(is.na(hours),0,hours)
minutes <- ifelse(is.na(minutes),0,minutes)
months <- ifelse(is.na(months),0,months)
if (is.na(month)){
return(hours)
}
else {
total_hours <- hours*month*4
}
}
return(round(total_hours,2))
}
month_df <- month_df %>% mutate(
hours_spent = sapply(Duration,sample_func)
)
unique(month_df$Duration)
## Get rows having following words: month, week, at-----------------------------
month_df <- df[which(str_detect(df$Duration, paste0(fixed("month"), "|", fixed("week"), "|", fixed(" at ")))), c("Duration", "URL", "category")]
month_df[which(month_df$Duration == "1 week of study, 2 hours"), "category"] <- "Hours"
month_df[which(month_df$Duration == "1 week of study, 2 hours"), "Duration"] <- "14 hours"
month_df <- month_df %>% mutate(
Duration = sapply(Duration,sample_func)
)
unique(month_df$Duration)
(month_df$Duration)
view(month_dura)
view(month_df)
sample_func <- function(value) {
if(value != 'No information'){
hours <- as.numeric((
str_extract(value, "(?<=\\b)\\d+(\\.\\d+)?(?=\\s+hours?\\b)")
))
minutes <- as.numeric((
str_extract(value, "(?<=\\b)\\d+(\\.\\d+)?(?=\\s+minutes?\\b)")
))
months <- as.numeric((
str_extract(value, "(?<=\\b)\\d+(\\.\\d+)?(?=\\s+months?\\b)")
))
hours <- ifelse(is.na(hours),0,hours)
minutes <- ifelse(is.na(minutes),0,minutes)
months <- ifelse(is.na(months),0,months)
if (is.na(month)){
return(hours)
}
else {
total_hours <- hours*month*4
return(round(total_hours,2))
}
}
}
## Get rows having following words: month, week, at-----------------------------
month_df <- df[which(str_detect(df$Duration, paste0(fixed("month"), "|", fixed("week"), "|", fixed(" at ")))), c("Duration", "URL", "category")]
month_df[which(month_df$Duration == "1 week of study, 2 hours"), "category"] <- "Hours"
month_df[which(month_df$Duration == "1 week of study, 2 hours"), "Duration"] <- "14 hours"
month_df <- month_df %>% mutate(
Duration = sapply(Duration,sample_func)
)
view(month_df)
